H8S,H8/300 SERIES C/C++ COMPILER (V.7.00.00.000)    2-Feb-2021 10:47:31 PAGE   1

******* STACK FRAME INFORMATION ********

FILE NAME: D:\WorkSpace\FullMoni\FullMoni\sbrk.c

Function (File D:\WorkSpa, Line    36): sbrk

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x00000004 Byte(s)
Total Frame Size        : 0x00000008 Byte(s)

Used Runtime Library Name


H8S,H8/300 SERIES C/C++ COMPILER (V.7.00.00.000)    2-Feb-2021 10:47:31 PAGE   1

************ OBJECT LISTING ************

FILE NAME: D:\WorkSpace\FullMoni\FullMoni\sbrk.c

SCT OFFSET CODE               LABEL     INSTRUCTION OPERAND    COMMENT

P                                                                  ; section
         1:    /***********************************************************************/
         2:    /*                                                                     */
         3:    /*  FILE        :sbrk.c                                                */
         4:    /*  DATE        :Sun, Nov 15, 2009                                     */
         5:    /*  DESCRIPTION :Program of sbrk                                       */
         6:    /*  CPU TYPE    :H8SX/1658                                             */
         7:    /*                                                                     */
         8:    /*  This file is generated by Renesas Project Generator (Ver.4.16).    */
         9:    /*                                                                     */
        10:    /***********************************************************************/
        11:                      
        12:    
        13:    
        14:    #include <stdio.h>
        15:    #include "typedefine.h"
        16:    #include "sbrk.h"
        17:    _SBYTE *sbrk(size_t);
        18:    
        19:    //const size_t _sbrk_size=              /* Specifies the minimum unit of */
        20:                                            /* the defined heap area         */
        21:    
        22:    #pragma pack 2
        23:    static union {
        24:        _SWORD  dummy;                      /* 2バイト境界にするためのダミー */
        25:        _SBYTE  heap[HEAPSIZE];             /* sbrkで管理する領域の宣言      */
        26:    } heap_area;
        27:    #pragma unpack
        28:    
        29:    static _SBYTE *brk=(_SBYTE *)&heap_area;  /* sbrkで割り付けた領域の最終アドレス */
        30:    
        31:    /*****************************************************************************/
        32:    /*  sbrk:データの書き出し                                                    */
        33:    /*       リターン値：割り付けた領域の先頭アドレス（成功）                    */
        34:    /*                   -1                          （失敗）                    */
        35:    /*****************************************************************************/
        36:    extern _SBYTE *sbrk(size_t size)              /* 割り付ける領域のサイズ */
  00000000                    _sbrk:                               ; function: sbrk
  00000000 01006DF3               PUSH.L      ER3
        37:    {
        38:        _SBYTE  *p;
        39:        if(brk+size > heap_area.heap+HEAPSIZE){   /* 空き領域のチェック */
  00000004 01006B2300000000       MOV.L       @__$brk:32,ER3
  0000000C 0AB0                   ADD.L       ER3,ER0
  0000000E 0F81                   MOV.L       ER0,ER1
  00000010 7A2000000000           CMP.L       #(__$heap_area+H'00000420),ER0
  00000016 4300                   BLS         L33:8
        40:            p = (_SBYTE *)-1;
  00000018 1A80                   SUB.L       ER0,ER0
  0000001A 1B70                   DEC.L       #1,ER0
  0000001C 5403                   RTS/L       ER3
  0000001E                    L33:                                  
        41:        }
        42:        else {
        43:            p = brk;                              /* 領域の割り付け     */
  0000001E 0FB0                   MOV.L       ER3,ER0
        44:            brk += size;                          /* 最終アドレスの更新 */
  00000020 01006BA100000000       MOV.L       ER1,@__$brk:32
  00000028 5403                   RTS/L       ER3
        45:        }
        46:    
        47:        return p;
        48:    }
D                                                                  ; section
  00000000                    __$brk:                              ; static: brk
  00000000 00000000               .DATA.L     __$heap_area
B                                                                  ; section
  00000000                    __$heap_area:                        ; static: heap_area
  00000000 00000420               .RES.W      528


