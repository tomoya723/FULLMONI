H8S,H8/300 SERIES C/C++ COMPILER (V.7.00.00.000)    5-Aug-2013 16:39:54 PAGE   1

******* STACK FRAME INFORMATION ********

FILE NAME: C:\WorkSpace\FullMoni\FullMoni\main.c

Function (File C:\WorkSpa, Line    70): main

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x00000000 Byte(s)
Total Frame Size        : 0x00000004 Byte(s)

Used Runtime Library Name


Function (File C:\WorkSpa, Line   159): Int_CAN2515

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000010 Byte(s)
Temporary Size          : 0x00000002 Byte(s)
Register Save Area Size : 0x00000014 Byte(s)
Total Frame Size        : 0x0000002a Byte(s)

Used Runtime Library Name


Function (File C:\WorkSpa, Line  1073): Int_50msFunc

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x00000014 Byte(s)
Total Frame Size        : 0x00000018 Byte(s)

Used Runtime Library Name


Function (File C:\WorkSpa, Line  1375): Int_1msFunc

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x00000004 Byte(s)
Total Frame Size        : 0x00000008 Byte(s)

Used Runtime Library Name


H8S,H8/300 SERIES C/C++ COMPILER (V.7.00.00.000)    5-Aug-2013 16:39:54 PAGE   1

************ OBJECT LISTING ************

FILE NAME: C:\WorkSpace\FullMoni\FullMoni\main.c

SCT OFFSET CODE               LABEL     INSTRUCTION OPERAND    COMMENT

P                                                                  ; section
         1:    // --------------------------------------------------------------------
         2:    // Copylight (C) 2013, Tomoya Sato( http://pub.ne.jp/nacci_tomoya )
         3:    //
         4:    // This file is part of FullMoni firmwere.
         5:    //
         6:    // FullMoni is free software: you can redistribute it and/or modify
         7:    // it under the terms of the GNU General Public License as published by
         8:    // the Free Software Foundation, either version 3 of the License, or
         9:    // (at your option ) any later version.
        10:    //
        11:    // FullMoni is distributed in the hope that it will be useful,
        12:    // but WITHIOUT ANY WARRANTY; without even the implied warranty of
        13:    // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
        14:    // GNU General Public License for more details.
        15:    //
        16:    // You should have received a copy of the GNU General Public License
        17:    // along with FullMoni. if not, see <http:/www.gnu.org/licenses/>.
        18:    //
        19:    // filename     :   main.c
        20:    // brief        :   FullMoni rev.B メインルーチン
        21:    // author       :   Tomoya Sato
        22:    // update       :   2013/08/05
        23:    // version      :   1.04
        24:    // --------------------------------------------------------------------
        25:    
        26:    // --------------------------------------------------------------------
        27:    // プロトタイプ宣言
        28:    // --------------------------------------------------------------------
        29:    void main(void);
        30:    #ifdef __cplusplus
        31:    extern "C" {
        32:    void abort(void);
        33:    }
        34:    #endif
        35:    
        36:    // --------------------------------------------------------------------
        37:    // システムヘッダファイル
        38:    // --------------------------------------------------------------------
        39:    #include <machine.h>
        40:    
        41:    // --------------------------------------------------------------------
        42:    // ユーザーヘッダファイル
        43:    // --------------------------------------------------------------------
        44:    #include "dataregister.h"
        45:    #include "iodefine.h"
        46:    #include "init_system.h"
        47:    #include "TFTLCD35.h"
        48:    #include "CAN2515.h"
        49:    #include "spi.h"
        50:    #include "state_control.h"
        51:    
        52:    // --------------------------------------------------------------------
        53:    // グローバル変数宣言
        54:    // --------------------------------------------------------------------
        55:    volatile char version[5] = "v1.04";
        56:    
        57:    // --------------------------------------------------------------------
        58:    // グローバル構造体宣言
        59:    // --------------------------------------------------------------------
        60:    volatile e2p_data_t         g_e2p_data;
        61:    volatile MoTeC1_data_t      g_MoTeC1_data;
        62:    volatile Haltech1_data_t    g_Haltech1_data;
        63:    volatile Haltech2_data_t    g_Haltech2_data;
        64:    volatile Freedom2_data_t    g_Freedom2_data;
        65:    volatile Megasquirt1_data_t g_Megasquirt1_data;
        66:    
        67:    // --------------------------------------------------------------------
        68:    // メインルーチン
        69:    // --------------------------------------------------------------------
        70:    void main(void)
  00000000                    _main:                               ; function: main
        71:    {
        72:        // --------------------------------------------------------------------
        73:        // 各種機能初期化
        74:        // --------------------------------------------------------------------
        75:        Init_CPG();
  00000000 5E000000               JSR         @_Init_CPG:24
        76:        Init_INTC();
  00000004 5E000000               JSR         @_Init_INTC:24
        77:        Init_MSTP();
  00000008 5E000000               JSR         @_Init_MSTP:24
        78:        Init_GPIO();
  0000000C 5E000000               JSR         @_Init_GPIO:24
        79:        Init_BSC();
  00000010 5E000000               JSR         @_Init_BSC:24
        80:        Init_EXDMAC();
  00000014 5E000000               JSR         @_Init_EXDMAC:24
        81:        Init_DMAC();
  00000018 5E000000               JSR         @_Init_DMAC:24
        82:        Init_TPU();
  0000001C 5E000000               JSR         @_Init_TPU:24
        83:    //  Init_UART();    //モデル別対応の為state_controlで実行
        84:        Init_TFTLCD();
  00000020 5E000000               JSR         @_Init_TFTLCD:24
        85:        Init_SPI();
  00000024 5E000000               JSR         @_Init_SPI:24
        86:    //  Init_CAN();     //モデル別対応の為state_controlで実行
        87:        Init_ADS7843();
  00000028 5E000000               JSR         @_Init_ADS7843:24
        88:        Init_IIC();
  0000002C 5E000000               JSR         @_Init_IIC:24
        89:        
        90:        // --------------------------------------------------------------------
        91:        // データ初期化
        92:        // --------------------------------------------------------------------
        93:        Init_MoTeC1_data();
  00000030 5E000000               JSR         @_Init_MoTeC1_data:24
        94:        Init_Haltech1_data();
  00000034 5E000000               JSR         @_Init_Haltech1_data:24
        95:        Init_Haltech2_data();
  00000038 5E000000               JSR         @_Init_Haltech2_data:24
        96:        Init_Freedom2_data();
  0000003C 5E000000               JSR         @_Init_Freedom2_data:24
        97:        Init_MSquirt1_data();
  00000040 5E000000               JSR         @_Init_MSquirt1_data:24
        98:    
        99:        // --------------------------------------------------------------------
       100:        // FONTデータ展開(Flash→内部RAM)
       101:        // --------------------------------------------------------------------
       102:        FONT_open();
  00000044 5E000000               JSR         @_FONT_open:24
       103:        
       104:        // --------------------------------------------------------------------
       105:        // 初期ステート定義
       106:        // --------------------------------------------------------------------
       107:        A001();
  00000048 5E000000               JSR         @_A001:24
  0000004C                    L7626:                                
       108:        
       109:        // --------------------------------------------------------------------
       110:        // メインループ
       111:        // --------------------------------------------------------------------
       112:        while(1)
       113:        {
       114:            state_control();        // 状態別処理実行
  0000004C 5E000000               JSR         @_state_control:24
  00000050 4000                   BRA         L7626:8
       115:        }
       116:    }
       117:    
       118:    // --------------------------------------------------------------------
       119:    // インライン関数宣言
       120:    // --------------------------------------------------------------------
       121:    #pragma inline (Touch_Decision)
       122:    #pragma inline (Beep_OneShotMin_control)
       123:    #pragma inline (Beep_OneShotMax_control)
       124:    #pragma inline (Beep_TwoShotMin_control)
       125:    
       126:    // --------------------------------------------------------------------
       127:    // インライン関数プロトタイプ宣言
       128:    // --------------------------------------------------------------------
       129:    static void Touch_Decision(void);
       130:    static void Beep_OneShotMin_control(void);
       131:    static void Beep_OneShotMax_control(void);
       132:    static void Beep_TwoShotMin_control(void);
       133:    
       134:    // --------------------------------------------------------------------
       135:    // グローバル変数宣言
       136:    // --------------------------------------------------------------------
       137:    volatile long           g_int50mscnt;
       138:    volatile unsigned int   touch_done_flg;
       139:    volatile unsigned int   touch_drag_flg;
       140:    volatile unsigned int   g_PressX, g_PressY;
       141:    volatile unsigned int   g_DragX, g_DragY;
       142:    volatile unsigned int   g_refresh_done;
       143:    volatile unsigned int   g_led_o_max_flg;
       144:    volatile unsigned int   g_led_o_min_flg;
       145:    volatile unsigned int   g_led_r_max_flg;
       146:    volatile unsigned int   g_led_r_min_flg;
       147:    volatile unsigned int   g_can_rcv_timer;
       148:    static unsigned int     touch_cnt;
       149:    static unsigned int     Beep_OneShotMin_cnt;
       150:    static unsigned int     Beep_OneShotMax_cnt;
       151:    static unsigned int     Beep_TwoShotMin_cnt;
       152:    static unsigned int     master_warning_cnt;
       153:    static unsigned int     g_shift_timing_cnt;
       154:    static unsigned int     LEDonoff_cnt;
       155:    
       156:    // --------------------------------------------------------------------
       157:    // MCP2515 CAN IRQ 外部割り込み
       158:    // --------------------------------------------------------------------
       159:    void Int_CAN2515(void)
  00000052                    _Int_CAN2515:                        ; function: Int_CAN2515
  00000052 01306DF2               STM.L       (ER2-ER5),@-SP
  00000056 01006DF6               PUSH.L      ER6
  0000005A 79370012               SUB.W       #H'0012:16,R7
       160:    {
       161:        // --------------------------------------------------------------------
       162:        // ローカル変数宣言
       163:        // --------------------------------------------------------------------
       164:        unsigned char CAN_rcv_INTF, can_rcv[14];
       165:        signed short msgID;
       166:        static unsigned int can_rcv_cnt;
       167:        
       168:        // --------------------------------------------------------------------
       169:        // 割り込みフラグクリア
       170:        // --------------------------------------------------------------------
       171:        INTC.ISR.BIT.IRQ3F = 0;
  0000005E 7A0300000000           MOV.L       #_Onetime_Peakclear_cnt,ER3
  00000064 7F377230               BCLR.B      #3,@H'00FFFF37:8
       172:        
       173:        // --------------------------------------------------------------------
       174:        // MCP2515割り込み要因別処理
       175:        // --------------------------------------------------------------------
       176:        CAN_rcv_INTF = CANReadReg(CANINTF);
  00000068 79002C03               MOV.W       #H'2C03:16,R0
  0000006C 5E000000               JSR         @_CANRegRead2B:24
  00000070 0C8A                   MOV.B       R0L,R2L
       177:        
       178:        if((CAN_rcv_INTF & 0x02) == 0x02)
  00000072 7318                   BTST.B      #1,R0L
  00000074 58700000               BEQ         L7630:16
       179:        {
       180:            CANRxB1Read(&can_rcv[1], 8);
  00000078 0FF1                   MOV.L       SP,ER1
  0000007A 0A31                   ADD.W       #3:3,R1
  0000007C 017D170D               MOV.B       #H'0D:8,@(1:2,SP)
  00000080 79000194               MOV.W       #H'0194:16,R0
  00000084 5E000000               JSR         @_CANTxRxBufRW:24
       181:            
       182:            msgID = MAKE_SID(can_rcv[1], can_rcv[2]);       // ID作成
  00000088 6E790003               MOV.B       @(3:16,SP),R1L
  0000008C 1751                   EXTU.W      R1
  0000008E 03831011               SHLL.W      #3:5,R1
  00000092 6E780004               MOV.B       @(4:16,SP),R0L
  00000096 1750                   EXTU.W      R0
  00000098 11D0                   SHAR.W      #2,R0
  0000009A 11D0                   SHAR.W      #2,R0
  0000009C 1190                   SHAR.W      R0
  0000009E 6401                   OR.W        R0,R1
  000000A0 0D10                   MOV.W       R1,R0
  000000A2 6FF10010               MOV.W       R1,@(H'0010:16,SP)
       183:            
       184:            if(Onetime_Peakclear_cnt > 0) Onetime_Peakclear_cnt --;
  000000A6 6938                   MOV.W       @ER3,E0
  000000A8 4700                   BEQ         L7671:8
  000000AA 7DB01A10               SUB.W       #1:3,@ER3
  000000AE                    L7671:                                
       185:            
       186:            if      (g_e2p_data.E2P_1.model == MoTeC1)
  000000AE 6A2900000000           MOV.B       @(_g_e2p_data+2):32,R1L
  000000B4 58600000               BNE         L7673:16
       187:            {
       188:                switch(msgID)
  000000B8 792005F0               CMP.W       #H'05F0:16,R0
  000000BC 58600000               BNE         L7630:16
       189:                {
       190:                    case 0x5F0:
       191:                                if(g_can_rcv_timer >= 10)       // 前回受信時から10mSec以上経過している場合
  000000C0 7A0500000000           MOV.L       #_g_can_rcv_timer,ER5
  000000C6 015E0520000A           CMP.W       #H'000A:16,@ER5
  000000CC 4500                   BLO         L7676:8
       192:                                {
       193:                                        can_rcv_cnt = 0;        //  0 データ先頭
       194:                                        g_MoTeC1_data.RPM                   = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  000000CE 6E710008               MOV.B       @(8:16,SP),R1H
  000000D2 1899                   SUB.B       R1L,R1L
  000000D4 6E780009               MOV.B       @(9:16,SP),R0L
  000000D8 1750                   EXTU.W      R0
  000000DA 0901                   ADD.W       R0,R1
  000000DC 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  000000E2 69C1                   MOV.W       R1,@ER4
       195:                                        g_MoTeC1_data.ThrottlePosition      = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  000000E4 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  000000E8 1899                   SUB.B       R1L,R1L
  000000EA 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000000EE 0901                   ADD.W       R0,R1
  000000F0 6FC10002               MOV.W       R1,@(2:16,ER4)
       196:                                        g_MoTeC1_data.ManifoldPressure      = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  000000F4 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  000000F8 1899                   SUB.B       R1L,R1L
  000000FA 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  000000FE 0901                   ADD.W       R0,R1
  00000100 6FC10004               MOV.W       R1,@(4:16,ER4)
       197:                                        g_MoTeC1_data.InletAirTemp          = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000104 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000108 1899                   SUB.B       R1L,R1L
  0000010A 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  0000010E 0901                   ADD.W       R0,R1
  00000110 6FC10006               MOV.W       R1,@(6:16,ER4)
       198:                                        can_rcv_cnt ++;
  00000114 6BF100000000           MOV.W       #1:4,@__$can_rcv_cnt$8:32
  0000011A 5A000000               JMP         @L7677:24
  0000011E                    L7676:                                
       199:                                }
       200:                                else
       201:                                {
       202:                                    if      (can_rcv_cnt ==  1) //  1
  0000011E 7A0600000000           MOV.L       #__$can_rcv_cnt$8,ER6
  00000124 6968                   MOV.W       @ER6,E0
  00000126 1F18                   CMP.W       #1:3,E0
  00000128 4600                   BNE         L7679:8
       203:                                    {
       204:                                        g_MoTeC1_data.EngineTemp            = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  0000012A 6E710008               MOV.B       @(8:16,SP),R1H
  0000012E 1899                   SUB.B       R1L,R1L
  00000130 6E780009               MOV.B       @(9:16,SP),R0L
  00000134 1750                   EXTU.W      R0
  00000136 0901                   ADD.W       R0,R1
  00000138 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  0000013E 6FC10008               MOV.W       R1,@(8:16,ER4)
       205:                                        g_MoTeC1_data.Lambda1               = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000142 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000146 1899                   SUB.B       R1L,R1L
  00000148 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  0000014C 0901                   ADD.W       R0,R1
  0000014E 6FC1000A               MOV.W       R1,@(H'000A:16,ER4)
       206:                                        g_MoTeC1_data.Lambda2               = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000152 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000156 1899                   SUB.B       R1L,R1L
  00000158 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  0000015C 0901                   ADD.W       R0,R1
  0000015E 6FC1000C               MOV.W       R1,@(H'000C:16,ER4)
       207:                                        g_MoTeC1_data.ExhaustPressure       = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000162 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000166 1899                   SUB.B       R1L,R1L
  00000168 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  0000016C 0901                   ADD.W       R0,R1
  0000016E 6FC1000E               MOV.W       R1,@(H'000E:16,ER4)
  00000172 5A000000               JMP         @L7680:24
  00000176                    L7679:                                
       208:                                        can_rcv_cnt ++;
       209:                                    }
       210:                                    else if (can_rcv_cnt ==  2) //  2
  00000176 1F28                   CMP.W       #2:3,E0
  00000178 4600                   BNE         L7682:8
       211:                                    {
       212:                                        g_MoTeC1_data.MassAirFlow           = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  0000017A 6E710008               MOV.B       @(8:16,SP),R1H
  0000017E 1899                   SUB.B       R1L,R1L
  00000180 6E780009               MOV.B       @(9:16,SP),R0L
  00000184 1750                   EXTU.W      R0
  00000186 0901                   ADD.W       R0,R1
  00000188 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  0000018E 6FC10010               MOV.W       R1,@(H'0010:16,ER4)
       213:                                        g_MoTeC1_data.FuelTemp              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000192 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000196 1899                   SUB.B       R1L,R1L
  00000198 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  0000019C 0901                   ADD.W       R0,R1
  0000019E 6FC10012               MOV.W       R1,@(H'0012:16,ER4)
       214:                                        g_MoTeC1_data.FuelPressure          = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  000001A2 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  000001A6 1899                   SUB.B       R1L,R1L
  000001A8 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  000001AC 0901                   ADD.W       R0,R1
  000001AE 6FC10014               MOV.W       R1,@(H'0014:16,ER4)
       215:                                        g_MoTeC1_data.OilTemp               = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  000001B2 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  000001B6 1899                   SUB.B       R1L,R1L
  000001B8 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  000001BC 0901                   ADD.W       R0,R1
  000001BE 6FC10016               MOV.W       R1,@(H'0016:16,ER4)
  000001C2 5A000000               JMP         @L7680:24
  000001C6                    L7682:                                
       216:                                        can_rcv_cnt ++;
       217:                                    }
       218:                                    else if (can_rcv_cnt ==  3) //  3
  000001C6 1F38                   CMP.W       #3:3,E0
  000001C8 4600                   BNE         L7684:8
       219:                                    {
       220:                                        g_MoTeC1_data.OilPressure           = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  000001CA 6E710008               MOV.B       @(8:16,SP),R1H
  000001CE 1899                   SUB.B       R1L,R1L
  000001D0 6E780009               MOV.B       @(9:16,SP),R0L
  000001D4 1750                   EXTU.W      R0
  000001D6 0901                   ADD.W       R0,R1
  000001D8 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'00000018):32
  000001DE 5A000000               JMP         @L7680:24
  000001E2                    L7684:                                
       221:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       222:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       223:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       224:                                        can_rcv_cnt ++;
       225:                                    }
       226:                                    else if (can_rcv_cnt ==  4) //  4
  000001E2 1F48                   CMP.W       #4:3,E0
  000001E4 4600                   BNE         L7686:8
       227:                                    {
       228:                                        g_MoTeC1_data.ExhaustTemp1          = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  000001E6 6E710008               MOV.B       @(8:16,SP),R1H
  000001EA 1899                   SUB.B       R1L,R1L
  000001EC 6E780009               MOV.B       @(9:16,SP),R0L
  000001F0 1750                   EXTU.W      R0
  000001F2 0901                   ADD.W       R0,R1
  000001F4 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  000001FA 6FC1001A               MOV.W       R1,@(H'001A:16,ER4)
       229:                                        g_MoTeC1_data.ExhaustTemp2          = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  000001FE 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000202 1899                   SUB.B       R1L,R1L
  00000204 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000208 0901                   ADD.W       R0,R1
  0000020A 6FC1001C               MOV.W       R1,@(H'001C:16,ER4)
  0000020E 5A000000               JMP         @L7680:24
  00000212                    L7686:                                
       230:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       231:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       232:                                        can_rcv_cnt ++;
       233:                                    }
       234:                                    else if (can_rcv_cnt ==  5) //  5
  00000212 1F58                   CMP.W       #5:3,E0
  00000214 4600                   BNE         L7688:8
       235:                                    {
       236:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       237:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       238:                                        g_MoTeC1_data.BatteryVoltage        = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000216 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  0000021A 1899                   SUB.B       R1L,R1L
  0000021C 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000220 1750                   EXTU.W      R0
  00000222 0901                   ADD.W       R0,R1
  00000224 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  0000022A 6FC1001E               MOV.W       R1,@(H'001E:16,ER4)
       239:                                        g_MoTeC1_data.ECUTemp               = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  0000022E 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000232 1899                   SUB.B       R1L,R1L
  00000234 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000238 0901                   ADD.W       R0,R1
  0000023A 6FC10020               MOV.W       R1,@(H'0020:16,ER4)
  0000023E 5A000000               JMP         @L7680:24
  00000242                    L7688:                                
       240:                                        can_rcv_cnt ++;
       241:                                    }
       242:                                    else if (can_rcv_cnt ==  6) //  6
  00000242 1F68                   CMP.W       #6:3,E0
  00000244 58700000               BEQ         L7680:16
       243:                                    {
       244:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       245:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       246:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       247:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       248:                                        can_rcv_cnt ++;
       249:                                    }
       250:                                    else if (can_rcv_cnt ==  7) //  7
  00000248 1F78                   CMP.W       #7:3,E0
  0000024A 4600                   BNE         L7691:8
       251:                                    {
       252:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       253:                                        g_MoTeC1_data.GroundSpeed           = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  0000024C 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000250 1899                   SUB.B       R1L,R1L
  00000252 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000256 1750                   EXTU.W      R0
  00000258 0901                   ADD.W       R0,R1
  0000025A 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'00000022):32
  00000260 5A000000               JMP         @L7680:24
  00000264                    L7691:                                
       254:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       255:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       256:                                        can_rcv_cnt ++;
       257:                                    }
       258:                                    else if (can_rcv_cnt ==  8) //  8
  00000264 79280008               CMP.W       #8:16,E0
  00000268 58700000               BEQ         L7680:16
       259:                                    {
       260:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       261:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       262:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       263:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       264:                                        can_rcv_cnt ++;
       265:                                    }
       266:                                    else if (can_rcv_cnt ==  9) //  9
  0000026C 79280009               CMP.W       #9:16,E0
  00000270 4600                   BNE         L7694:8
       267:                                    {
       268:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       269:                                        g_MoTeC1_data.AimLambda1            = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000272 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000276 1899                   SUB.B       R1L,R1L
  00000278 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  0000027C 1750                   EXTU.W      R0
  0000027E 0901                   ADD.W       R0,R1
  00000280 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000286 6FC10024               MOV.W       R1,@(H'0024:16,ER4)
       270:                                        g_MoTeC1_data.AimLambda2            = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  0000028A 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  0000028E 1899                   SUB.B       R1L,R1L
  00000290 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000294 0901                   ADD.W       R0,R1
  00000296 6FC10026               MOV.W       R1,@(H'0026:16,ER4)
  0000029A 5A000000               JMP         @L7680:24
  0000029E                    L7694:                                
       271:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       272:                                        can_rcv_cnt ++;
       273:                                    }
       274:                                    else if (can_rcv_cnt == 10) // 10
  0000029E 7928000A               CMP.W       #H'000A:16,E0
  000002A2 4600                   BNE         L7696:8
       275:                                    {
       276:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       277:                                        g_MoTeC1_data.IgnitionAdvance       = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  000002A4 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  000002A8 1899                   SUB.B       R1L,R1L
  000002AA 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000002AE 1750                   EXTU.W      R0
  000002B0 0901                   ADD.W       R0,R1
  000002B2 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'00000028):32
  000002B8 4000                   BRA         L7680:8
  000002BA                    L7696:                                
       278:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       279:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       280:                                        can_rcv_cnt ++;
       281:                                    }
       282:                                    else if (can_rcv_cnt == 11) // 11
  000002BA 7928000B               CMP.W       #H'000B:16,E0
  000002BE 4700                   BEQ         L7680:8
       283:                                    {
       284:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       285:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       286:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       287:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       288:                                        can_rcv_cnt ++;
       289:                                    }
       290:                                    else if (can_rcv_cnt == 12) // 12
  000002C0 7928000C               CMP.W       #H'000C:16,E0
  000002C4 4700                   BEQ         L7680:8
       291:                                    {
       292:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       293:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       294:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       295:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       296:                                        can_rcv_cnt ++;
       297:                                    }
       298:                                    else if (can_rcv_cnt == 13) // 13
  000002C6 7928000D               CMP.W       #H'000D:16,E0
  000002CA 4600                   BNE         L7700:8
       299:                                    {
       300:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       301:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       302:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       303:                                        g_MoTeC1_data.InjectorDuty          = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  000002CC 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  000002D0 1899                   SUB.B       R1L,R1L
  000002D2 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  000002D6 1750                   EXTU.W      R0
  000002D8 0901                   ADD.W       R0,R1
  000002DA 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'0000002A):32
  000002E0 4000                   BRA         L7680:8
  000002E2                    L7700:                                
       304:                                        can_rcv_cnt ++;
       305:                                    }
       306:                                    else if (can_rcv_cnt == 14) // 14
  000002E2 7928000E               CMP.W       #H'000E:16,E0
  000002E6 4600                   BNE         L7702:8
       307:                                    {
       308:                                        g_MoTeC1_data.Gear                  = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  000002E8 6E710008               MOV.B       @(8:16,SP),R1H
  000002EC 1899                   SUB.B       R1L,R1L
  000002EE 6E780009               MOV.B       @(9:16,SP),R0L
  000002F2 1750                   EXTU.W      R0
  000002F4 0901                   ADD.W       R0,R1
  000002F6 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'0000002C):32
  000002FC 4000                   BRA         L7680:8
  000002FE                    L7702:                                
       309:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       310:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       311:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       312:                                        can_rcv_cnt ++;
       313:                                    }
       314:                                    else if (can_rcv_cnt == 15) // 15
  000002FE 7928000F               CMP.W       #H'000F:16,E0
  00000302 4700                   BEQ         L7680:8
       315:                                    {
       316:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       317:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       318:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       319:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       320:                                        can_rcv_cnt ++;
       321:                                    }
       322:                                    else if (can_rcv_cnt == 16) // 16
  00000304 79280010               CMP.W       #H'0010:16,E0
  00000308 4700                   BEQ         L7680:8
       323:                                    {
       324:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       325:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       326:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       327:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       328:                                        can_rcv_cnt ++;
       329:                                    }
       330:                                    else if (can_rcv_cnt == 17) // 17
  0000030A 79280011               CMP.W       #H'0011:16,E0
  0000030E 4600                   BNE         L7677:8
  00000310                    L7680:                                
  00000310 0B58                   INC.W       #1,E0
  00000312 69E8                   MOV.W       E0,@ER6
  00000314                    L7677:                                
       331:                                    {
       332:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       333:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       334:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       335:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       336:                                        can_rcv_cnt ++;
       337:                                    }
       338:                                }
       339:                                
       340:                                g_can_rcv_timer = 0;    // タイマーリセット
  00000314 015D0500               MOV.W       #0:8,@ER5
  00000318 5A000000               JMP         @L7630:24
  0000031C                    L7673:                                
       341:                                default: break;
       342:                }
       343:            }
       344:            else if (g_e2p_data.E2P_1.model == MoTeC2)
  0000031C 6A3800000000A001       CMP.B       #1:8,@(_g_e2p_data+2):32
  00000324 58600000               BNE         L7706:16
       345:            {
       346:                switch(msgID)
  00000328 792000E8               CMP.W       #H'00E8:16,R0
  0000032C 58600000               BNE         L7630:16
       347:                {
       348:                    case 0x0E8:
       349:                                if((can_rcv[6] == 0x82) && (can_rcv[7] == 0x81) && (can_rcv[8] == 0x80))
  00000330 6E780008               MOV.B       @(8:16,SP),R0L
  00000334 A882                   CMP.B       #H'82:8,R0L
  00000336 4600                   BNE         L7709:8
  00000338 01746E780009A081       CMP.B       #H'81:8,@(9:16,SP)
  00000340 4600                   BNE         L7709:8
  00000342 01746E78000AA080       CMP.B       #H'80:8,@(H'000A:16,SP)
  0000034A 4600                   BNE         L7709:8
       350:                                {
       351:                                    can_rcv_cnt = 0;
  0000034C 1988                   SUB.W       E0,E0
  0000034E 6BA800000000           MOV.W       E0,@__$can_rcv_cnt$8:32
  00000354                    L7709:                                
       352:                                }
       353:                                else
       354:                                {
       355:                                    //
       356:                                }
       357:                                if      (can_rcv_cnt ==  0) //  0
  00000354 7A0600000000           MOV.L       #__$can_rcv_cnt$8,ER6
  0000035A 6968                   MOV.W       @ER6,E0
  0000035C 4600                   BNE         L7713:8
       358:                                {
       359:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       360:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       361:                                    g_MoTeC1_data.RPM                   = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  0000035E 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000362 1899                   SUB.B       R1L,R1L
  00000364 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000368 1750                   EXTU.W      R0
  0000036A 0901                   ADD.W       R0,R1
  0000036C 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000372 69C1                   MOV.W       R1,@ER4
       362:                                    g_MoTeC1_data.ThrottlePosition      = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000374 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000378 1899                   SUB.B       R1L,R1L
  0000037A 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  0000037E 0901                   ADD.W       R0,R1
  00000380 6FC10002               MOV.W       R1,@(2:16,ER4)
  00000384 5A000000               JMP         @L7714:24
  00000388                    L7713:                                
       363:                                    can_rcv_cnt ++;
       364:                                }
       365:                                else if (can_rcv_cnt ==  1) //  1
  00000388 1F18                   CMP.W       #1:3,E0
  0000038A 4600                   BNE         L7716:8
       366:                                {
       367:                                    g_MoTeC1_data.ManifoldPressure      = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  0000038C 0C81                   MOV.B       R0L,R1H
  0000038E 1899                   SUB.B       R1L,R1L
  00000390 6E780009               MOV.B       @(9:16,SP),R0L
  00000394 1750                   EXTU.W      R0
  00000396 0901                   ADD.W       R0,R1
  00000398 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  0000039E 6FC10004               MOV.W       R1,@(4:16,ER4)
       368:                                    g_MoTeC1_data.InletAirTemp          = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  000003A2 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  000003A6 1899                   SUB.B       R1L,R1L
  000003A8 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000003AC 0901                   ADD.W       R0,R1
  000003AE 6FC10006               MOV.W       R1,@(6:16,ER4)
       369:                                    g_MoTeC1_data.EngineTemp            = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  000003B2 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  000003B6 1899                   SUB.B       R1L,R1L
  000003B8 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  000003BC 0901                   ADD.W       R0,R1
  000003BE 6FC10008               MOV.W       R1,@(8:16,ER4)
       370:                                    g_MoTeC1_data.Lambda1               = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  000003C2 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  000003C6 1899                   SUB.B       R1L,R1L
  000003C8 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  000003CC 0901                   ADD.W       R0,R1
  000003CE 6FC1000A               MOV.W       R1,@(H'000A:16,ER4)
  000003D2 5A000000               JMP         @L7714:24
  000003D6                    L7716:                                
       371:                                    can_rcv_cnt ++;
       372:                                }
       373:                                else if (can_rcv_cnt ==  2) //  2
  000003D6 1F28                   CMP.W       #2:3,E0
  000003D8 4600                   BNE         L7718:8
       374:                                {
       375:                                    g_MoTeC1_data.Lambda2               = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  000003DA 0C81                   MOV.B       R0L,R1H
  000003DC 1899                   SUB.B       R1L,R1L
  000003DE 6E780009               MOV.B       @(9:16,SP),R0L
  000003E2 1750                   EXTU.W      R0
  000003E4 0901                   ADD.W       R0,R1
  000003E6 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  000003EC 6FC1000C               MOV.W       R1,@(H'000C:16,ER4)
       376:                                    g_MoTeC1_data.ExhaustPressure       = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  000003F0 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  000003F4 1899                   SUB.B       R1L,R1L
  000003F6 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000003FA 0901                   ADD.W       R0,R1
  000003FC 6FC1000E               MOV.W       R1,@(H'000E:16,ER4)
       377:                                    g_MoTeC1_data.MassAirFlow           = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000400 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000404 1899                   SUB.B       R1L,R1L
  00000406 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  0000040A 0901                   ADD.W       R0,R1
  0000040C 6FC10010               MOV.W       R1,@(H'0010:16,ER4)
       378:                                    g_MoTeC1_data.FuelTemp              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000410 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000414 1899                   SUB.B       R1L,R1L
  00000416 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  0000041A 0901                   ADD.W       R0,R1
  0000041C 6FC10012               MOV.W       R1,@(H'0012:16,ER4)
  00000420 5A000000               JMP         @L7714:24
  00000424                    L7718:                                
       379:                                    can_rcv_cnt ++;
       380:                                }
       381:                                else if (can_rcv_cnt ==  3) //  3
  00000424 1F38                   CMP.W       #3:3,E0
  00000426 4600                   BNE         L7720:8
       382:                                {
       383:                                    g_MoTeC1_data.FuelPressure          = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000428 0C81                   MOV.B       R0L,R1H
  0000042A 1899                   SUB.B       R1L,R1L
  0000042C 6E780009               MOV.B       @(9:16,SP),R0L
  00000430 1750                   EXTU.W      R0
  00000432 0901                   ADD.W       R0,R1
  00000434 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  0000043A 6FC10014               MOV.W       R1,@(H'0014:16,ER4)
       384:                                    g_MoTeC1_data.OilTemp               = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  0000043E 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000442 1899                   SUB.B       R1L,R1L
  00000444 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000448 0901                   ADD.W       R0,R1
  0000044A 6FC10016               MOV.W       R1,@(H'0016:16,ER4)
       385:                                    g_MoTeC1_data.OilPressure           = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  0000044E 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000452 1899                   SUB.B       R1L,R1L
  00000454 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000458 0901                   ADD.W       R0,R1
  0000045A 6FC10018               MOV.W       R1,@(H'0018:16,ER4)
  0000045E 5A000000               JMP         @L7714:24
  00000462                    L7720:                                
       386:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       387:                                    can_rcv_cnt ++;
       388:                                }
       389:                                else if (can_rcv_cnt ==  4) //  4
  00000462 1F48                   CMP.W       #4:3,E0
  00000464 4600                   BNE         L7722:8
       390:                                {
       391:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       392:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       393:                                    g_MoTeC1_data.ExhaustTemp1          = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000466 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  0000046A 1899                   SUB.B       R1L,R1L
  0000046C 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000470 1750                   EXTU.W      R0
  00000472 0901                   ADD.W       R0,R1
  00000474 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  0000047A 6FC1001A               MOV.W       R1,@(H'001A:16,ER4)
       394:                                    g_MoTeC1_data.ExhaustTemp2          = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  0000047E 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000482 1899                   SUB.B       R1L,R1L
  00000484 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000488 0901                   ADD.W       R0,R1
  0000048A 6FC1001C               MOV.W       R1,@(H'001C:16,ER4)
  0000048E 5A000000               JMP         @L7714:24
  00000492                    L7722:                                
       395:                                    can_rcv_cnt ++;
       396:                                }
       397:                                else if (can_rcv_cnt ==  5) //  5
  00000492 1F58                   CMP.W       #5:3,E0
  00000494 58700000               BEQ         L7714:16
       398:                                {
       399:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       400:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       401:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       402:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       403:                                    can_rcv_cnt ++;
       404:                                }
       405:                                else if (can_rcv_cnt ==  6) //  6
  00000498 1F68                   CMP.W       #6:3,E0
  0000049A 4600                   BNE         L7725:8
       406:                                {
       407:                                    g_MoTeC1_data.BatteryVoltage        = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  0000049C 0C81                   MOV.B       R0L,R1H
  0000049E 1899                   SUB.B       R1L,R1L
  000004A0 6E780009               MOV.B       @(9:16,SP),R0L
  000004A4 1750                   EXTU.W      R0
  000004A6 0901                   ADD.W       R0,R1
  000004A8 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  000004AE 6FC1001E               MOV.W       R1,@(H'001E:16,ER4)
       408:                                    g_MoTeC1_data.ECUTemp               = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  000004B2 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  000004B6 1899                   SUB.B       R1L,R1L
  000004B8 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000004BC 0901                   ADD.W       R0,R1
  000004BE 6FC10020               MOV.W       R1,@(H'0020:16,ER4)
  000004C2 5A000000               JMP         @L7714:24
  000004C6                    L7725:                                
       409:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       410:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       411:                                    can_rcv_cnt ++;
       412:                                }
       413:                                else if (can_rcv_cnt ==  7) //  7
  000004C6 1F78                   CMP.W       #7:3,E0
  000004C8 4600                   BNE         L7727:8
       414:                                {
       415:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       416:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       417:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       418:                                    g_MoTeC1_data.GroundSpeed           = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  000004CA 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  000004CE 1899                   SUB.B       R1L,R1L
  000004D0 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  000004D4 1750                   EXTU.W      R0
  000004D6 0901                   ADD.W       R0,R1
  000004D8 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'00000022):32
  000004DE 5A000000               JMP         @L7714:24
  000004E2                    L7727:                                
       419:                                    can_rcv_cnt ++;
       420:                                }
       421:                                else if (can_rcv_cnt ==  8) //  8
  000004E2 79280008               CMP.W       #8:16,E0
  000004E6 58700000               BEQ         L7714:16
       422:                                {
       423:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       424:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       425:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       426:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       427:                                    can_rcv_cnt ++;
       428:                                }
       429:                                else if (can_rcv_cnt ==  9) //  9
  000004EA 79280009               CMP.W       #9:16,E0
  000004EE 4600                   BNE         L7730:8
       430:                                {
       431:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       432:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       433:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       434:                                    g_MoTeC1_data.AimLambda1            = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  000004F0 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  000004F4 1899                   SUB.B       R1L,R1L
  000004F6 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  000004FA 1750                   EXTU.W      R0
  000004FC 0901                   ADD.W       R0,R1
  000004FE 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'00000024):32
  00000504 5A000000               JMP         @L7714:24
  00000508                    L7730:                                
       435:                                    can_rcv_cnt ++;
       436:                                }
       437:                                else if (can_rcv_cnt == 10) // 10
  00000508 7928000A               CMP.W       #H'000A:16,E0
  0000050C 4600                   BNE         L7732:8
       438:                                {
       439:                                    g_MoTeC1_data.AimLambda2            = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  0000050E 0C81                   MOV.B       R0L,R1H
  00000510 1899                   SUB.B       R1L,R1L
  00000512 6E780009               MOV.B       @(9:16,SP),R0L
  00000516 1750                   EXTU.W      R0
  00000518 0901                   ADD.W       R0,R1
  0000051A 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000520 6FC10026               MOV.W       R1,@(H'0026:16,ER4)
       440:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       441:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       442:                                    g_MoTeC1_data.IgnitionAdvance       = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000524 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000528 1899                   SUB.B       R1L,R1L
  0000052A 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  0000052E 0901                   ADD.W       R0,R1
  00000530 6FC10028               MOV.W       R1,@(H'0028:16,ER4)
  00000534 5A000000               JMP         @L7714:24
  00000538                    L7732:                                
       443:                                    can_rcv_cnt ++;
       444:                                }
       445:                                else if (can_rcv_cnt == 11) // 11
  00000538 7928000B               CMP.W       #H'000B:16,E0
  0000053C 58700000               BEQ         L7714:16
       446:                                {
       447:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       448:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       449:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       450:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       451:                                    can_rcv_cnt ++;
       452:                                }
       453:                                else if (can_rcv_cnt == 12) // 12
  00000540 7928000C               CMP.W       #H'000C:16,E0
  00000544 4700                   BEQ         L7714:8
       454:                                {
       455:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       456:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       457:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       458:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       459:                                    can_rcv_cnt ++;
       460:                                }
       461:                                else if (can_rcv_cnt == 13) // 13
  00000546 7928000D               CMP.W       #H'000D:16,E0
  0000054A 4700                   BEQ         L7714:8
       462:                                {
       463:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       464:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       465:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       466:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       467:                                    can_rcv_cnt ++;
       468:                                }
       469:                                else if (can_rcv_cnt == 14) // 14
  0000054C 7928000E               CMP.W       #H'000E:16,E0
  00000550 4600                   BNE         L7737:8
       470:                                {
       471:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       472:                                    g_MoTeC1_data.InjectorDuty          = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000552 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000556 1899                   SUB.B       R1L,R1L
  00000558 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  0000055C 1750                   EXTU.W      R0
  0000055E 0901                   ADD.W       R0,R1
  00000560 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000566 6FC1002A               MOV.W       R1,@(H'002A:16,ER4)
       473:                                    g_MoTeC1_data.Gear                  = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  0000056A 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  0000056E 1899                   SUB.B       R1L,R1L
  00000570 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000574 0901                   ADD.W       R0,R1
  00000576 6FC1002C               MOV.W       R1,@(H'002C:16,ER4)
  0000057A 4000                   BRA         L7714:8
  0000057C                    L7737:                                
       474:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       475:                                    can_rcv_cnt ++;
       476:                                }
       477:                                else if (can_rcv_cnt == 15) // 15
  0000057C 7928000F               CMP.W       #H'000F:16,E0
  00000580 4700                   BEQ         L7714:8
       478:                                {
       479:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       480:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       481:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       482:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       483:                                    can_rcv_cnt ++;
       484:                                }
       485:                                else if (can_rcv_cnt == 16) // 16
  00000582 79280010               CMP.W       #H'0010:16,E0
  00000586 4700                   BEQ         L7714:8
       486:                                {
       487:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       488:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       489:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       490:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       491:                                    can_rcv_cnt ++;
       492:                                }
       493:                                else if (can_rcv_cnt == 17) // 17
  00000588 79280011               CMP.W       #H'0011:16,E0
  0000058C 4700                   BEQ         L7714:8
       494:                                {
       495:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       496:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       497:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       498:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       499:                                    can_rcv_cnt ++;
       500:                                }
       501:                                else if (can_rcv_cnt == 18) // 18
  0000058E 79280012               CMP.W       #H'0012:16,E0
  00000592 4700                   BEQ         L7714:8
       502:                                {
       503:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       504:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       505:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       506:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       507:                                    can_rcv_cnt ++;
       508:                                }
       509:                                else if (can_rcv_cnt == 19) // 19
  00000594 79280013               CMP.W       #H'0013:16,E0
  00000598 4700                   BEQ         L7714:8
       510:                                {
       511:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       512:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       513:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       514:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       515:                                    can_rcv_cnt ++;
       516:                                }
       517:                                else if (can_rcv_cnt == 20) // 20
  0000059A 79280014               CMP.W       #H'0014:16,E0
  0000059E 4700                   BEQ         L7714:8
       518:                                {
       519:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       520:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       521:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       522:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       523:                                    can_rcv_cnt ++;
       524:                                }
       525:                                else if (can_rcv_cnt == 21) // 21
  000005A0 79280015               CMP.W       #H'0015:16,E0
  000005A4 58600000               BNE         L7630:16
  000005A8                    L7714:                                
  000005A8 0B58                   INC.W       #1,E0
  000005AA 69E8                   MOV.W       E0,@ER6
  000005AC 5A000000               JMP         @L7630:24
  000005B0                    L7706:                                
       526:                                {
       527:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       528:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       529:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       530:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       531:                                    can_rcv_cnt ++;
       532:                                }
       533:                                default: break;
       534:                }
       535:            }
       536:            else if (g_e2p_data.E2P_1.model == Haltech1)
  000005B0 6A3800000000A002       CMP.B       #2:8,@(_g_e2p_data+2):32
  000005B8 58600000               BNE         L7745:16
       537:            {
       538:                switch(msgID)
  000005BC 0D01                   MOV.W       R0,R1
  000005BE E800                   AND.B       #0:8,R0L
  000005C0 0D00                   MOV.W       R0,R0
  000005C2 58600000               BNE         L7630:16
  000005C6 A910                   CMP.B       #H'10:8,R1L
  000005C8 58700000               BEQ         L7633:16
  000005CC A911                   CMP.B       #H'11:8,R1L
  000005CE 58700000               BEQ         L7634:16
  000005D2 A912                   CMP.B       #H'12:8,R1L
  000005D4 4700                   BEQ         L7635:8
  000005D6 A913                   CMP.B       #H'13:8,R1L
  000005D8 58600000               BNE         L7630:16
       539:                {
       540:                    case 0x010:
       541:                                g_Haltech1_data.RPM                 = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       542:                                g_Haltech1_data.GroundSpeed         = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       543:                                g_Haltech1_data.OilPressure         = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       544:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       545:                                break;
       546:                    case 0x011:
       547:                                g_Haltech1_data.EngineTemp          = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       548:                                g_Haltech1_data.FuelPressure        = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       549:                                g_Haltech1_data.BatteryVoltage      = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       550:                                g_Haltech1_data.ThrottlePosition    = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       551:                                break;
       552:                    case 0x012:
       553:                                g_Haltech1_data.ManifoldPressure    = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       554:                                g_Haltech1_data.InletAirTemp        = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       555:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       556:                                g_Haltech1_data.Lambda              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       557:                                break;
       558:                    case 0x013:
       559:                                g_Haltech1_data.IgnitionAdvance     = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  000005DC 6E710008               MOV.B       @(8:16,SP),R1H
  000005E0 1899                   SUB.B       R1L,R1L
  000005E2 6E780009               MOV.B       @(9:16,SP),R0L
  000005E6 1750                   EXTU.W      R0
  000005E8 0901                   ADD.W       R0,R1
  000005EA 7A0400000000           MOV.L       #_g_Haltech1_data,ER4
  000005F0 6FC10014               MOV.W       R1,@(H'0014:16,ER4)
       560:                                g_Haltech1_data.Gear                = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  000005F4 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  000005F8 1899                   SUB.B       R1L,R1L
  000005FA 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000005FE 0901                   ADD.W       R0,R1
  00000600 6FC10016               MOV.W       R1,@(H'0016:16,ER4)
       561:                                g_Haltech1_data.InjectorDuty        = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000604 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000608 1899                   SUB.B       R1L,R1L
  0000060A 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  0000060E 0901                   ADD.W       R0,R1
  00000610 6FC10018               MOV.W       R1,@(H'0018:16,ER4)
  00000614 5A000000               JMP         @L7630:24
  00000618                    L7635:                                
  00000618 6E710008               MOV.B       @(8:16,SP),R1H
  0000061C 1899                   SUB.B       R1L,R1L
  0000061E 6E780009               MOV.B       @(9:16,SP),R0L
  00000622 1750                   EXTU.W      R0
  00000624 0901                   ADD.W       R0,R1
  00000626 7A0400000000           MOV.L       #_g_Haltech1_data,ER4
  0000062C 6FC1000E               MOV.W       R1,@(H'000E:16,ER4)
  00000630 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000634 1899                   SUB.B       R1L,R1L
  00000636 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  0000063A 0901                   ADD.W       R0,R1
  0000063C 6FC10010               MOV.W       R1,@(H'0010:16,ER4)
  00000640 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000644 1899                   SUB.B       R1L,R1L
  00000646 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  0000064A 0901                   ADD.W       R0,R1
  0000064C 6FC10012               MOV.W       R1,@(H'0012:16,ER4)
  00000650 5A000000               JMP         @L7630:24
  00000654                    L7634:                                
  00000654 6E710008               MOV.B       @(8:16,SP),R1H
  00000658 1899                   SUB.B       R1L,R1L
  0000065A 6E780009               MOV.B       @(9:16,SP),R0L
  0000065E 1750                   EXTU.W      R0
  00000660 0901                   ADD.W       R0,R1
  00000662 7A0400000000           MOV.L       #_g_Haltech1_data,ER4
  00000668 6FC10006               MOV.W       R1,@(6:16,ER4)
  0000066C 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000670 1899                   SUB.B       R1L,R1L
  00000672 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000676 0901                   ADD.W       R0,R1
  00000678 6FC10008               MOV.W       R1,@(8:16,ER4)
  0000067C 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000680 1899                   SUB.B       R1L,R1L
  00000682 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000686 0901                   ADD.W       R0,R1
  00000688 6FC1000A               MOV.W       R1,@(H'000A:16,ER4)
  0000068C 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000690 1899                   SUB.B       R1L,R1L
  00000692 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000696 0901                   ADD.W       R0,R1
  00000698 6FC1000C               MOV.W       R1,@(H'000C:16,ER4)
  0000069C 5A000000               JMP         @L7630:24
  000006A0                    L7633:                                
  000006A0 6E710008               MOV.B       @(8:16,SP),R1H
  000006A4 1899                   SUB.B       R1L,R1L
  000006A6 6E780009               MOV.B       @(9:16,SP),R0L
  000006AA 1750                   EXTU.W      R0
  000006AC 0901                   ADD.W       R0,R1
  000006AE 7A0400000000           MOV.L       #_g_Haltech1_data,ER4
  000006B4 69C1                   MOV.W       R1,@ER4
  000006B6 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  000006BA 1899                   SUB.B       R1L,R1L
  000006BC 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000006C0 0901                   ADD.W       R0,R1
  000006C2 6FC10002               MOV.W       R1,@(2:16,ER4)
  000006C6 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  000006CA 1899                   SUB.B       R1L,R1L
  000006CC 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  000006D0 0901                   ADD.W       R0,R1
  000006D2 6FC10004               MOV.W       R1,@(4:16,ER4)
  000006D6 5A000000               JMP         @L7630:24
  000006DA                    L7745:                                
       562:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       563:                                default: break;
       564:                }
       565:            }
       566:            else if (g_e2p_data.E2P_1.model == Haltech2)
  000006DA 6A3800000000A003       CMP.B       #3:8,@(_g_e2p_data+2):32
  000006E2 58600000               BNE         L7630:16
       567:            {
       568:                switch(msgID)
  000006E6 79200360               CMP.W       #H'0360:16,R0
  000006EA 58700000               BEQ         L7638:16
  000006EE 79200361               CMP.W       #H'0361:16,R0
  000006F2 58700000               BEQ         L7639:16
  000006F6 79200362               CMP.W       #H'0362:16,R0
  000006FA 58700000               BEQ         L7640:16
  000006FE 79200368               CMP.W       #H'0368:16,R0
  00000702 58700000               BEQ         L7641:16
  00000706 79200370               CMP.W       #H'0370:16,R0
  0000070A 58700000               BEQ         L7642:16
  0000070E 79200372               CMP.W       #H'0372:16,R0
  00000712 58700000               BEQ         L7643:16
  00000716 79200373               CMP.W       #H'0373:16,R0
  0000071A 4700                   BEQ         L7644:8
  0000071C 792003E0               CMP.W       #H'03E0:16,R0
  00000720 58600000               BNE         L7630:16
       569:                {
       570:                    case 0x360:
       571:                                g_Haltech2_data.RPM                 = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       572:                                g_Haltech2_data.ManifoldPressure    = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       573:                                g_Haltech2_data.ThrottlePosition    = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       574:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       575:                                break;
       576:                    case 0x361:
       577:                                g_Haltech2_data.FuelPressure        = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       578:                                g_Haltech2_data.OilPressure         = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       579:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       580:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       581:                                break;
       582:                    case 0x362:
       583:                                g_Haltech2_data.InjectorDuty        = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       584:                                // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       585:                                g_Haltech2_data.IgnitionAdvance1    = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       586:                                g_Haltech2_data.IgnitionAdvance2    = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       587:                                break;
       588:                    case 0x368:
       589:                                g_Haltech2_data.Lambda              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       590:                                // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       591:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       592:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       593:                                break;
       594:                    case 0x370:
       595:                                g_Haltech2_data.GroundSpeed         = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       596:                                g_Haltech2_data.Gear                = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       597:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       598:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       599:                                break;
       600:                    case 0x372:
       601:                                g_Haltech2_data.BatteryVoltage      = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       602:                                g_Haltech2_data.InletAirTemp2       = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       603:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       604:                                g_Haltech2_data.BaroPressure        = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       605:                                break;
       606:                    case 0x373:
       607:                                g_Haltech2_data.EGT                 = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       608:                                // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       609:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       610:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       611:                                break;
       612:                    case 0x3E0:
       613:                                g_Haltech2_data.EngineTemp          = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000724 6E710008               MOV.B       @(8:16,SP),R1H
  00000728 1899                   SUB.B       R1L,R1L
  0000072A 6E780009               MOV.B       @(9:16,SP),R0L
  0000072E 1750                   EXTU.W      R0
  00000730 0901                   ADD.W       R0,R1
  00000732 7A0400000000           MOV.L       #_g_Haltech2_data,ER4
  00000738 6FC1001E               MOV.W       R1,@(H'001E:16,ER4)
       614:                                g_Haltech2_data.InletAirTemp1       = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  0000073C 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000740 1899                   SUB.B       R1L,R1L
  00000742 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000746 0901                   ADD.W       R0,R1
  00000748 6FC10020               MOV.W       R1,@(H'0020:16,ER4)
       615:                                g_Haltech2_data.FuelTemp            = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  0000074C 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000750 1899                   SUB.B       R1L,R1L
  00000752 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000756 0901                   ADD.W       R0,R1
  00000758 6FC10022               MOV.W       R1,@(H'0022:16,ER4)
       616:                                g_Haltech2_data.OilTemp             = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  0000075C 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000760 1899                   SUB.B       R1L,R1L
  00000762 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000766 0901                   ADD.W       R0,R1
  00000768 6FC10024               MOV.W       R1,@(H'0024:16,ER4)
  0000076C 5A000000               JMP         @L7630:24
  00000770                    L7644:                                
  00000770 6E710008               MOV.B       @(8:16,SP),R1H
  00000774 1899                   SUB.B       R1L,R1L
  00000776 6E780009               MOV.B       @(9:16,SP),R0L
  0000077A 1750                   EXTU.W      R0
  0000077C 0901                   ADD.W       R0,R1
  0000077E 6BA100000000           MOV.W       R1,@(_g_Haltech2_data+H'0000001C):32
  00000784 5A000000               JMP         @L7630:24
  00000788                    L7643:                                
  00000788 6E710008               MOV.B       @(8:16,SP),R1H
  0000078C 1899                   SUB.B       R1L,R1L
  0000078E 6E780009               MOV.B       @(9:16,SP),R0L
  00000792 1750                   EXTU.W      R0
  00000794 0901                   ADD.W       R0,R1
  00000796 7A0400000000           MOV.L       #_g_Haltech2_data,ER4
  0000079C 6FC10016               MOV.W       R1,@(H'0016:16,ER4)
  000007A0 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  000007A4 1899                   SUB.B       R1L,R1L
  000007A6 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000007AA 0901                   ADD.W       R0,R1
  000007AC 6FC10018               MOV.W       R1,@(H'0018:16,ER4)
  000007B0 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  000007B4 1899                   SUB.B       R1L,R1L
  000007B6 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  000007BA 0901                   ADD.W       R0,R1
  000007BC 6FC1001A               MOV.W       R1,@(H'001A:16,ER4)
  000007C0 5A000000               JMP         @L7630:24
  000007C4                    L7642:                                
  000007C4 6E710008               MOV.B       @(8:16,SP),R1H
  000007C8 1899                   SUB.B       R1L,R1L
  000007CA 6E780009               MOV.B       @(9:16,SP),R0L
  000007CE 1750                   EXTU.W      R0
  000007D0 0901                   ADD.W       R0,R1
  000007D2 7A0400000000           MOV.L       #_g_Haltech2_data,ER4
  000007D8 6FC10012               MOV.W       R1,@(H'0012:16,ER4)
  000007DC 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  000007E0 1899                   SUB.B       R1L,R1L
  000007E2 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000007E6 0901                   ADD.W       R0,R1
  000007E8 6FC10014               MOV.W       R1,@(H'0014:16,ER4)
  000007EC 5A000000               JMP         @L7630:24
  000007F0                    L7641:                                
  000007F0 6E710008               MOV.B       @(8:16,SP),R1H
  000007F4 1899                   SUB.B       R1L,R1L
  000007F6 6E780009               MOV.B       @(9:16,SP),R0L
  000007FA 1750                   EXTU.W      R0
  000007FC 0901                   ADD.W       R0,R1
  000007FE 6BA100000000           MOV.W       R1,@(_g_Haltech2_data+H'00000010):32
  00000804 5A000000               JMP         @L7630:24
  00000808                    L7640:                                
  00000808 6E710008               MOV.B       @(8:16,SP),R1H
  0000080C 1899                   SUB.B       R1L,R1L
  0000080E 6E780009               MOV.B       @(9:16,SP),R0L
  00000812 1750                   EXTU.W      R0
  00000814 0901                   ADD.W       R0,R1
  00000816 7A0400000000           MOV.L       #_g_Haltech2_data,ER4
  0000081C 6FC1000A               MOV.W       R1,@(H'000A:16,ER4)
  00000820 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000824 1899                   SUB.B       R1L,R1L
  00000826 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  0000082A 0901                   ADD.W       R0,R1
  0000082C 6FC1000C               MOV.W       R1,@(H'000C:16,ER4)
  00000830 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000834 1899                   SUB.B       R1L,R1L
  00000836 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  0000083A 0901                   ADD.W       R0,R1
  0000083C 6FC1000E               MOV.W       R1,@(H'000E:16,ER4)
  00000840 4000                   BRA         L7630:8
  00000842                    L7639:                                
  00000842 6E710008               MOV.B       @(8:16,SP),R1H
  00000846 1899                   SUB.B       R1L,R1L
  00000848 6E780009               MOV.B       @(9:16,SP),R0L
  0000084C 1750                   EXTU.W      R0
  0000084E 0901                   ADD.W       R0,R1
  00000850 7A0400000000           MOV.L       #_g_Haltech2_data,ER4
  00000856 6FC10006               MOV.W       R1,@(6:16,ER4)
  0000085A 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  0000085E 1899                   SUB.B       R1L,R1L
  00000860 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000864 0901                   ADD.W       R0,R1
  00000866 6FC10008               MOV.W       R1,@(8:16,ER4)
  0000086A 4000                   BRA         L7630:8
  0000086C                    L7638:                                
  0000086C 6E710008               MOV.B       @(8:16,SP),R1H
  00000870 1899                   SUB.B       R1L,R1L
  00000872 6E780009               MOV.B       @(9:16,SP),R0L
  00000876 1750                   EXTU.W      R0
  00000878 0901                   ADD.W       R0,R1
  0000087A 7A0400000000           MOV.L       #_g_Haltech2_data,ER4
  00000880 69C1                   MOV.W       R1,@ER4
  00000882 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000886 1899                   SUB.B       R1L,R1L
  00000888 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  0000088C 0901                   ADD.W       R0,R1
  0000088E 6FC10002               MOV.W       R1,@(2:16,ER4)
  00000892 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000896 1899                   SUB.B       R1L,R1L
  00000898 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  0000089C 0901                   ADD.W       R0,R1
  0000089E 6FC10004               MOV.W       R1,@(4:16,ER4)
  000008A2                    L7630:                                
       617:                                default: break;
       618:                }
       619:            }
       620:        }
       621:        if((CAN_rcv_INTF & 0x01) == 0x01)
  000008A2 730A                   BTST.B      #0,R2L
  000008A4 58700000               BEQ         L7648:16
       622:        {
       623:            CANRxB0Read(&can_rcv[1], 8);
  000008A8 0FF1                   MOV.L       SP,ER1
  000008AA 0A31                   ADD.W       #3:3,R1
  000008AC 017D170D               MOV.B       #H'0D:8,@(1:2,SP)
  000008B0 79000190               MOV.W       #H'0190:16,R0
  000008B4 5E000000               JSR         @_CANTxRxBufRW:24
       624:            
       625:            msgID = MAKE_SID(can_rcv[1], can_rcv[2]);       // ID作成
  000008B8 6E790003               MOV.B       @(3:16,SP),R1L
  000008BC 1751                   EXTU.W      R1
  000008BE 03831011               SHLL.W      #3:5,R1
  000008C2 6E780004               MOV.B       @(4:16,SP),R0L
  000008C6 1750                   EXTU.W      R0
  000008C8 11D0                   SHAR.W      #2,R0
  000008CA 11D0                   SHAR.W      #2,R0
  000008CC 1190                   SHAR.W      R0
  000008CE 6401                   OR.W        R0,R1
  000008D0 6FF10010               MOV.W       R1,@(H'0010:16,SP)
       626:            
       627:            if(Onetime_Peakclear_cnt > 0) Onetime_Peakclear_cnt --;
  000008D4 6930                   MOV.W       @ER3,R0
  000008D6 4700                   BEQ         L7773:8
  000008D8 7DB01A10               SUB.W       #1:3,@ER3
  000008DC                    L7773:                                
       628:            
       629:            if      (g_e2p_data.E2P_1.model == MoTeC1)
  000008DC 6A2800000000           MOV.B       @(_g_e2p_data+2):32,R0L
  000008E2 58600000               BNE         L7775:16
       630:            {
       631:                switch(msgID)
  000008E6 792105F0               CMP.W       #H'05F0:16,R1
  000008EA 58600000               BNE         L7648:16
       632:                {
       633:                    case 0x5F0:
       634:                                if(g_can_rcv_timer >= 10)       // 前回受信時から10mSec以上経過している場合
  000008EE 7A0500000000           MOV.L       #_g_can_rcv_timer,ER5
  000008F4 015E0520000A           CMP.W       #H'000A:16,@ER5
  000008FA 4500                   BLO         L7779:8
       635:                                {
       636:                                        can_rcv_cnt = 0;        //  0 データ先頭
       637:                                        g_MoTeC1_data.RPM                   = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  000008FC 6E710008               MOV.B       @(8:16,SP),R1H
  00000900 1899                   SUB.B       R1L,R1L
  00000902 6E780009               MOV.B       @(9:16,SP),R0L
  00000906 1750                   EXTU.W      R0
  00000908 0901                   ADD.W       R0,R1
  0000090A 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000910 69C1                   MOV.W       R1,@ER4
       638:                                        g_MoTeC1_data.ThrottlePosition      = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000912 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000916 1899                   SUB.B       R1L,R1L
  00000918 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  0000091C 0901                   ADD.W       R0,R1
  0000091E 6FC10002               MOV.W       R1,@(2:16,ER4)
       639:                                        g_MoTeC1_data.ManifoldPressure      = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000922 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000926 1899                   SUB.B       R1L,R1L
  00000928 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  0000092C 0901                   ADD.W       R0,R1
  0000092E 6FC10004               MOV.W       R1,@(4:16,ER4)
       640:                                        g_MoTeC1_data.InletAirTemp          = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000932 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000936 1899                   SUB.B       R1L,R1L
  00000938 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  0000093C 0901                   ADD.W       R0,R1
  0000093E 6FC10006               MOV.W       R1,@(6:16,ER4)
       641:                                        can_rcv_cnt ++;
  00000942 6BF100000000           MOV.W       #1:4,@__$can_rcv_cnt$8:32
  00000948 5A000000               JMP         @L7780:24
  0000094C                    L7779:                                
       642:                                }
       643:                                else
       644:                                {
       645:                                    if      (can_rcv_cnt ==  1) //  1
  0000094C 7A0600000000           MOV.L       #__$can_rcv_cnt$8,ER6
  00000952 6968                   MOV.W       @ER6,E0
  00000954 1F18                   CMP.W       #1:3,E0
  00000956 4600                   BNE         L7782:8
       646:                                    {
       647:                                        g_MoTeC1_data.EngineTemp            = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000958 6E710008               MOV.B       @(8:16,SP),R1H
  0000095C 1899                   SUB.B       R1L,R1L
  0000095E 6E780009               MOV.B       @(9:16,SP),R0L
  00000962 1750                   EXTU.W      R0
  00000964 0901                   ADD.W       R0,R1
  00000966 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  0000096C 6FC10008               MOV.W       R1,@(8:16,ER4)
       648:                                        g_MoTeC1_data.Lambda1               = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000970 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000974 1899                   SUB.B       R1L,R1L
  00000976 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  0000097A 0901                   ADD.W       R0,R1
  0000097C 6FC1000A               MOV.W       R1,@(H'000A:16,ER4)
       649:                                        g_MoTeC1_data.Lambda2               = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000980 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000984 1899                   SUB.B       R1L,R1L
  00000986 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  0000098A 0901                   ADD.W       R0,R1
  0000098C 6FC1000C               MOV.W       R1,@(H'000C:16,ER4)
       650:                                        g_MoTeC1_data.ExhaustPressure       = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000990 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000994 1899                   SUB.B       R1L,R1L
  00000996 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  0000099A 0901                   ADD.W       R0,R1
  0000099C 6FC1000E               MOV.W       R1,@(H'000E:16,ER4)
  000009A0 5A000000               JMP         @L7783:24
  000009A4                    L7782:                                
       651:                                        can_rcv_cnt ++;
       652:                                    }
       653:                                    else if (can_rcv_cnt ==  2) //  2
  000009A4 1F28                   CMP.W       #2:3,E0
  000009A6 4600                   BNE         L7785:8
       654:                                    {
       655:                                        g_MoTeC1_data.MassAirFlow           = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  000009A8 6E710008               MOV.B       @(8:16,SP),R1H
  000009AC 1899                   SUB.B       R1L,R1L
  000009AE 6E780009               MOV.B       @(9:16,SP),R0L
  000009B2 1750                   EXTU.W      R0
  000009B4 0901                   ADD.W       R0,R1
  000009B6 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  000009BC 6FC10010               MOV.W       R1,@(H'0010:16,ER4)
       656:                                        g_MoTeC1_data.FuelTemp              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  000009C0 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  000009C4 1899                   SUB.B       R1L,R1L
  000009C6 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000009CA 0901                   ADD.W       R0,R1
  000009CC 6FC10012               MOV.W       R1,@(H'0012:16,ER4)
       657:                                        g_MoTeC1_data.FuelPressure          = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  000009D0 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  000009D4 1899                   SUB.B       R1L,R1L
  000009D6 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  000009DA 0901                   ADD.W       R0,R1
  000009DC 6FC10014               MOV.W       R1,@(H'0014:16,ER4)
       658:                                        g_MoTeC1_data.OilTemp               = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  000009E0 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  000009E4 1899                   SUB.B       R1L,R1L
  000009E6 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  000009EA 0901                   ADD.W       R0,R1
  000009EC 6FC10016               MOV.W       R1,@(H'0016:16,ER4)
  000009F0 5A000000               JMP         @L7783:24
  000009F4                    L7785:                                
       659:                                        can_rcv_cnt ++;
       660:                                    }
       661:                                    else if (can_rcv_cnt ==  3) //  3
  000009F4 1F38                   CMP.W       #3:3,E0
  000009F6 4600                   BNE         L7787:8
       662:                                    {
       663:                                        g_MoTeC1_data.OilPressure           = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  000009F8 6E710008               MOV.B       @(8:16,SP),R1H
  000009FC 1899                   SUB.B       R1L,R1L
  000009FE 6E780009               MOV.B       @(9:16,SP),R0L
  00000A02 1750                   EXTU.W      R0
  00000A04 0901                   ADD.W       R0,R1
  00000A06 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'00000018):32
  00000A0C 5A000000               JMP         @L7783:24
  00000A10                    L7787:                                
       664:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       665:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       666:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       667:                                        can_rcv_cnt ++;
       668:                                    }
       669:                                    else if (can_rcv_cnt ==  4) //  4
  00000A10 1F48                   CMP.W       #4:3,E0
  00000A12 4600                   BNE         L7789:8
       670:                                    {
       671:                                        g_MoTeC1_data.ExhaustTemp1          = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000A14 6E710008               MOV.B       @(8:16,SP),R1H
  00000A18 1899                   SUB.B       R1L,R1L
  00000A1A 6E780009               MOV.B       @(9:16,SP),R0L
  00000A1E 1750                   EXTU.W      R0
  00000A20 0901                   ADD.W       R0,R1
  00000A22 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000A28 6FC1001A               MOV.W       R1,@(H'001A:16,ER4)
       672:                                        g_MoTeC1_data.ExhaustTemp2          = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000A2C 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000A30 1899                   SUB.B       R1L,R1L
  00000A32 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000A36 0901                   ADD.W       R0,R1
  00000A38 6FC1001C               MOV.W       R1,@(H'001C:16,ER4)
  00000A3C 5A000000               JMP         @L7783:24
  00000A40                    L7789:                                
       673:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       674:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       675:                                        can_rcv_cnt ++;
       676:                                    }
       677:                                    else if (can_rcv_cnt ==  5) //  5
  00000A40 1F58                   CMP.W       #5:3,E0
  00000A42 4600                   BNE         L7791:8
       678:                                    {
       679:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       680:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       681:                                        g_MoTeC1_data.BatteryVoltage        = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000A44 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000A48 1899                   SUB.B       R1L,R1L
  00000A4A 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000A4E 1750                   EXTU.W      R0
  00000A50 0901                   ADD.W       R0,R1
  00000A52 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000A58 6FC1001E               MOV.W       R1,@(H'001E:16,ER4)
       682:                                        g_MoTeC1_data.ECUTemp               = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000A5C 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000A60 1899                   SUB.B       R1L,R1L
  00000A62 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000A66 0901                   ADD.W       R0,R1
  00000A68 6FC10020               MOV.W       R1,@(H'0020:16,ER4)
  00000A6C 5A000000               JMP         @L7783:24
  00000A70                    L7791:                                
       683:                                        can_rcv_cnt ++;
       684:                                    }
       685:                                    else if (can_rcv_cnt ==  6) //  6
  00000A70 1F68                   CMP.W       #6:3,E0
  00000A72 58700000               BEQ         L7783:16
       686:                                    {
       687:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       688:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       689:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       690:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       691:                                        can_rcv_cnt ++;
       692:                                    }
       693:                                    else if (can_rcv_cnt ==  7) //  7
  00000A76 1F78                   CMP.W       #7:3,E0
  00000A78 4600                   BNE         L7794:8
       694:                                    {
       695:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       696:                                        g_MoTeC1_data.GroundSpeed           = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000A7A 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000A7E 1899                   SUB.B       R1L,R1L
  00000A80 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000A84 1750                   EXTU.W      R0
  00000A86 0901                   ADD.W       R0,R1
  00000A88 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'00000022):32
  00000A8E 5A000000               JMP         @L7783:24
  00000A92                    L7794:                                
       697:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       698:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       699:                                        can_rcv_cnt ++;
       700:                                    }
       701:                                    else if (can_rcv_cnt ==  8) //  8
  00000A92 79280008               CMP.W       #8:16,E0
  00000A96 58700000               BEQ         L7783:16
       702:                                    {
       703:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       704:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       705:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       706:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       707:                                        can_rcv_cnt ++;
       708:                                    }
       709:                                    else if (can_rcv_cnt ==  9) //  9
  00000A9A 79280009               CMP.W       #9:16,E0
  00000A9E 4600                   BNE         L7797:8
       710:                                    {
       711:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       712:                                        g_MoTeC1_data.AimLambda1            = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000AA0 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000AA4 1899                   SUB.B       R1L,R1L
  00000AA6 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000AAA 1750                   EXTU.W      R0
  00000AAC 0901                   ADD.W       R0,R1
  00000AAE 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000AB4 6FC10024               MOV.W       R1,@(H'0024:16,ER4)
       713:                                        g_MoTeC1_data.AimLambda2            = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000AB8 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000ABC 1899                   SUB.B       R1L,R1L
  00000ABE 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000AC2 0901                   ADD.W       R0,R1
  00000AC4 6FC10026               MOV.W       R1,@(H'0026:16,ER4)
  00000AC8 5A000000               JMP         @L7783:24
  00000ACC                    L7797:                                
       714:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       715:                                        can_rcv_cnt ++;
       716:                                    }
       717:                                    else if (can_rcv_cnt == 10) // 10
  00000ACC 7928000A               CMP.W       #H'000A:16,E0
  00000AD0 4600                   BNE         L7799:8
       718:                                    {
       719:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       720:                                        g_MoTeC1_data.IgnitionAdvance       = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000AD2 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000AD6 1899                   SUB.B       R1L,R1L
  00000AD8 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000ADC 1750                   EXTU.W      R0
  00000ADE 0901                   ADD.W       R0,R1
  00000AE0 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'00000028):32
  00000AE6 4000                   BRA         L7783:8
  00000AE8                    L7799:                                
       721:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       722:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       723:                                        can_rcv_cnt ++;
       724:                                    }
       725:                                    else if (can_rcv_cnt == 11) // 11
  00000AE8 7928000B               CMP.W       #H'000B:16,E0
  00000AEC 4700                   BEQ         L7783:8
       726:                                    {
       727:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       728:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       729:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       730:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       731:                                        can_rcv_cnt ++;
       732:                                    }
       733:                                    else if (can_rcv_cnt == 12) // 12
  00000AEE 7928000C               CMP.W       #H'000C:16,E0
  00000AF2 4700                   BEQ         L7783:8
       734:                                    {
       735:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       736:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       737:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       738:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       739:                                        can_rcv_cnt ++;
       740:                                    }
       741:                                    else if (can_rcv_cnt == 13) // 13
  00000AF4 7928000D               CMP.W       #H'000D:16,E0
  00000AF8 4600                   BNE         L7803:8
       742:                                    {
       743:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       744:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       745:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       746:                                        g_MoTeC1_data.InjectorDuty          = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000AFA 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000AFE 1899                   SUB.B       R1L,R1L
  00000B00 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000B04 1750                   EXTU.W      R0
  00000B06 0901                   ADD.W       R0,R1
  00000B08 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'0000002A):32
  00000B0E 4000                   BRA         L7783:8
  00000B10                    L7803:                                
       747:                                        can_rcv_cnt ++;
       748:                                    }
       749:                                    else if (can_rcv_cnt == 14) // 14
  00000B10 7928000E               CMP.W       #H'000E:16,E0
  00000B14 4600                   BNE         L7805:8
       750:                                    {
       751:                                        g_MoTeC1_data.Gear                  = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000B16 6E710008               MOV.B       @(8:16,SP),R1H
  00000B1A 1899                   SUB.B       R1L,R1L
  00000B1C 6E780009               MOV.B       @(9:16,SP),R0L
  00000B20 1750                   EXTU.W      R0
  00000B22 0901                   ADD.W       R0,R1
  00000B24 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'0000002C):32
  00000B2A 4000                   BRA         L7783:8
  00000B2C                    L7805:                                
       752:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       753:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       754:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       755:                                        can_rcv_cnt ++;
       756:                                    }
       757:                                    else if (can_rcv_cnt == 15) // 15
  00000B2C 7928000F               CMP.W       #H'000F:16,E0
  00000B30 4700                   BEQ         L7783:8
       758:                                    {
       759:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       760:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       761:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       762:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       763:                                        can_rcv_cnt ++;
       764:                                    }
       765:                                    else if (can_rcv_cnt == 16) // 16
  00000B32 79280010               CMP.W       #H'0010:16,E0
  00000B36 4700                   BEQ         L7783:8
       766:                                    {
       767:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       768:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       769:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       770:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       771:                                        can_rcv_cnt ++;
       772:                                    }
       773:                                    else if (can_rcv_cnt == 17) // 17
  00000B38 79280011               CMP.W       #H'0011:16,E0
  00000B3C 4600                   BNE         L7780:8
  00000B3E                    L7783:                                
  00000B3E 0B58                   INC.W       #1,E0
  00000B40 69E8                   MOV.W       E0,@ER6
  00000B42                    L7780:                                
       774:                                    {
       775:                                        // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       776:                                        // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       777:                                        // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       778:                                        // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       779:                                        can_rcv_cnt ++;
       780:                                    }
       781:                                }
       782:                                
       783:                                g_can_rcv_timer = 0;    // タイマーリセット
  00000B42 015D0500               MOV.W       #0:8,@ER5
  00000B46 5A000000               JMP         @L7648:24
  00000B4A                    L7775:                                
       784:                                default: break;
       785:                }
       786:            }
       787:            else if (g_e2p_data.E2P_1.model == MoTeC2)
  00000B4A 6A3800000000A001       CMP.B       #1:8,@(_g_e2p_data+2):32
  00000B52 58600000               BNE         L7809:16
       788:            {
       789:                switch(msgID)
  00000B56 792100E8               CMP.W       #H'00E8:16,R1
  00000B5A 58600000               BNE         L7648:16
       790:                {
       791:                    case 0x0E8:
       792:                                if((can_rcv[6] == 0x82) && (can_rcv[7] == 0x81) && (can_rcv[8] == 0x80))
  00000B5E 6E780008               MOV.B       @(8:16,SP),R0L
  00000B62 A882                   CMP.B       #H'82:8,R0L
  00000B64 4600                   BNE         L7813:8
  00000B66 01746E780009A081       CMP.B       #H'81:8,@(9:16,SP)
  00000B6E 4600                   BNE         L7813:8
  00000B70 01746E78000AA080       CMP.B       #H'80:8,@(H'000A:16,SP)
  00000B78 4600                   BNE         L7813:8
       793:                                {
       794:                                    can_rcv_cnt = 0;
  00000B7A 1988                   SUB.W       E0,E0
  00000B7C 6BA800000000           MOV.W       E0,@__$can_rcv_cnt$8:32
  00000B82                    L7813:                                
       795:                                }
       796:                                else
       797:                                {
       798:                                    //
       799:                                }
       800:                                if      (can_rcv_cnt ==  0) //  0
  00000B82 7A0600000000           MOV.L       #__$can_rcv_cnt$8,ER6
  00000B88 6968                   MOV.W       @ER6,E0
  00000B8A 4600                   BNE         L7817:8
       801:                                {
       802:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       803:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       804:                                    g_MoTeC1_data.RPM                   = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000B8C 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000B90 1899                   SUB.B       R1L,R1L
  00000B92 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000B96 1750                   EXTU.W      R0
  00000B98 0901                   ADD.W       R0,R1
  00000B9A 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000BA0 69C1                   MOV.W       R1,@ER4
       805:                                    g_MoTeC1_data.ThrottlePosition      = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000BA2 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000BA6 1899                   SUB.B       R1L,R1L
  00000BA8 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000BAC 0901                   ADD.W       R0,R1
  00000BAE 6FC10002               MOV.W       R1,@(2:16,ER4)
  00000BB2 5A000000               JMP         @L7990:24
       806:                                    can_rcv_cnt ++;
  00000BB6                    L7817:                                
       807:                                }
       808:                                else if (can_rcv_cnt ==  1) //  1
  00000BB6 1F18                   CMP.W       #1:3,E0
  00000BB8 4600                   BNE         L7819:8
       809:                                {
       810:                                    g_MoTeC1_data.ManifoldPressure      = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000BBA 0C81                   MOV.B       R0L,R1H
  00000BBC 1899                   SUB.B       R1L,R1L
  00000BBE 6E780009               MOV.B       @(9:16,SP),R0L
  00000BC2 1750                   EXTU.W      R0
  00000BC4 0901                   ADD.W       R0,R1
  00000BC6 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000BCC 6FC10004               MOV.W       R1,@(4:16,ER4)
       811:                                    g_MoTeC1_data.InletAirTemp          = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000BD0 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000BD4 1899                   SUB.B       R1L,R1L
  00000BD6 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000BDA 0901                   ADD.W       R0,R1
  00000BDC 6FC10006               MOV.W       R1,@(6:16,ER4)
       812:                                    g_MoTeC1_data.EngineTemp            = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000BE0 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000BE4 1899                   SUB.B       R1L,R1L
  00000BE6 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000BEA 0901                   ADD.W       R0,R1
  00000BEC 6FC10008               MOV.W       R1,@(8:16,ER4)
       813:                                    g_MoTeC1_data.Lambda1               = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000BF0 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000BF4 1899                   SUB.B       R1L,R1L
  00000BF6 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000BFA 0901                   ADD.W       R0,R1
  00000BFC 6FC1000A               MOV.W       R1,@(H'000A:16,ER4)
  00000C00 5A000000               JMP         @L7990:24
  00000C04                    L7819:                                
       814:                                    can_rcv_cnt ++;
       815:                                }
       816:                                else if (can_rcv_cnt ==  2) //  2
  00000C04 1F28                   CMP.W       #2:3,E0
  00000C06 4600                   BNE         L7821:8
       817:                                {
       818:                                    g_MoTeC1_data.Lambda2               = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000C08 0C81                   MOV.B       R0L,R1H
  00000C0A 1899                   SUB.B       R1L,R1L
  00000C0C 6E780009               MOV.B       @(9:16,SP),R0L
  00000C10 1750                   EXTU.W      R0
  00000C12 0901                   ADD.W       R0,R1
  00000C14 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000C1A 6FC1000C               MOV.W       R1,@(H'000C:16,ER4)
       819:                                    g_MoTeC1_data.ExhaustPressure       = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000C1E 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000C22 1899                   SUB.B       R1L,R1L
  00000C24 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000C28 0901                   ADD.W       R0,R1
  00000C2A 6FC1000E               MOV.W       R1,@(H'000E:16,ER4)
       820:                                    g_MoTeC1_data.MassAirFlow           = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000C2E 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000C32 1899                   SUB.B       R1L,R1L
  00000C34 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000C38 0901                   ADD.W       R0,R1
  00000C3A 6FC10010               MOV.W       R1,@(H'0010:16,ER4)
       821:                                    g_MoTeC1_data.FuelTemp              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000C3E 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000C42 1899                   SUB.B       R1L,R1L
  00000C44 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000C48 0901                   ADD.W       R0,R1
  00000C4A 6FC10012               MOV.W       R1,@(H'0012:16,ER4)
  00000C4E 5A000000               JMP         @L7990:24
  00000C52                    L7821:                                
       822:                                    can_rcv_cnt ++;
       823:                                }
       824:                                else if (can_rcv_cnt ==  3) //  3
  00000C52 1F38                   CMP.W       #3:3,E0
  00000C54 4600                   BNE         L7823:8
       825:                                {
       826:                                    g_MoTeC1_data.FuelPressure          = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000C56 0C81                   MOV.B       R0L,R1H
  00000C58 1899                   SUB.B       R1L,R1L
  00000C5A 6E780009               MOV.B       @(9:16,SP),R0L
  00000C5E 1750                   EXTU.W      R0
  00000C60 0901                   ADD.W       R0,R1
  00000C62 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000C68 6FC10014               MOV.W       R1,@(H'0014:16,ER4)
       827:                                    g_MoTeC1_data.OilTemp               = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000C6C 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000C70 1899                   SUB.B       R1L,R1L
  00000C72 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000C76 0901                   ADD.W       R0,R1
  00000C78 6FC10016               MOV.W       R1,@(H'0016:16,ER4)
       828:                                    g_MoTeC1_data.OilPressure           = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000C7C 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000C80 1899                   SUB.B       R1L,R1L
  00000C82 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000C86 0901                   ADD.W       R0,R1
  00000C88 6FC10018               MOV.W       R1,@(H'0018:16,ER4)
  00000C8C 4000                   BRA         L7990:8
  00000C8E                    L7823:                                
       829:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       830:                                    can_rcv_cnt ++;
       831:                                }
       832:                                else if (can_rcv_cnt ==  4) //  4
  00000C8E 1F48                   CMP.W       #4:3,E0
  00000C90 4600                   BNE         L7825:8
       833:                                {
       834:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       835:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       836:                                    g_MoTeC1_data.ExhaustTemp1          = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000C92 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000C96 1899                   SUB.B       R1L,R1L
  00000C98 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000C9C 1750                   EXTU.W      R0
  00000C9E 0901                   ADD.W       R0,R1
  00000CA0 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000CA6 6FC1001A               MOV.W       R1,@(H'001A:16,ER4)
       837:                                    g_MoTeC1_data.ExhaustTemp2          = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000CAA 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000CAE 1899                   SUB.B       R1L,R1L
  00000CB0 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000CB4 0901                   ADD.W       R0,R1
  00000CB6 6FC1001C               MOV.W       R1,@(H'001C:16,ER4)
  00000CBA 4000                   BRA         L7990:8
  00000CBC                    L7825:                                
       838:                                    can_rcv_cnt ++;
       839:                                }
       840:                                else if (can_rcv_cnt ==  5) //  5
  00000CBC 1F58                   CMP.W       #5:3,E0
  00000CBE 4700                   BEQ         L7990:8
       841:                                {
       842:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       843:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       844:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       845:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       846:                                    can_rcv_cnt ++;
       847:                                }
       848:                                else if (can_rcv_cnt ==  6) //  6
  00000CC0 1F68                   CMP.W       #6:3,E0
  00000CC2 4600                   BNE         L7829:8
       849:                                {
       850:                                    g_MoTeC1_data.BatteryVoltage        = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000CC4 0C81                   MOV.B       R0L,R1H
  00000CC6 1899                   SUB.B       R1L,R1L
  00000CC8 6E780009               MOV.B       @(9:16,SP),R0L
  00000CCC 1750                   EXTU.W      R0
  00000CCE 0901                   ADD.W       R0,R1
  00000CD0 7A0400000000           MOV.L       #_g_MoTeC1_data,ER4
  00000CD6 6FC1001E               MOV.W       R1,@(H'001E:16,ER4)
       851:                                    g_MoTeC1_data.ECUTemp               = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000CDA 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000CDE 1899                   SUB.B       R1L,R1L
  00000CE0 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000CE4 0901                   ADD.W       R0,R1
  00000CE6 6FC10020               MOV.W       R1,@(H'0020:16,ER4)
  00000CEA                    L7990:                                
  00000CEA 0B58                   INC.W       #1,E0
  00000CEC 69E8                   MOV.W       E0,@ER6
  00000CEE 5A000000               JMP         @L7648:24
  00000CF2                    L7829:                                
       852:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       853:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       854:                                    can_rcv_cnt ++;
       855:                                }
       856:                                else if (can_rcv_cnt ==  7) //  7
  00000CF2 1F78                   CMP.W       #7:3,E0
  00000CF4 58700000               BEQ         L7831:16
       857:                                {
       858:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       859:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       860:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       861:                                    g_MoTeC1_data.GroundSpeed           = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       862:                                    can_rcv_cnt ++;
       863:                                }
       864:                                else if (can_rcv_cnt ==  8) //  8
  00000CF8 6960                   MOV.W       @ER6,R0
  00000CFA 79200008               CMP.W       #8:16,R0
  00000CFE 58700000               BEQ         L7833:16
       865:                                {
       866:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       867:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       868:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       869:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       870:                                    can_rcv_cnt ++;
       871:                                }
       872:                                else if (can_rcv_cnt ==  9) //  9
  00000D02 79200009               CMP.W       #9:16,R0
  00000D06 4600                   BNE         L7835:8
       873:                                {
       874:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       875:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       876:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       877:                                    g_MoTeC1_data.AimLambda1            = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000D08 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000D0C 1899                   SUB.B       R1L,R1L
  00000D0E 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000D12 1750                   EXTU.W      R0
  00000D14 0901                   ADD.W       R0,R1
  00000D16 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'00000024):32
  00000D1C 5A000000               JMP         @L7833:24
  00000D20                    L7835:                                
       878:                                    can_rcv_cnt ++;
       879:                                }
       880:                                else if (can_rcv_cnt == 10) // 10
  00000D20 7920000A               CMP.W       #H'000A:16,R0
  00000D24 4600                   BNE         L7837:8
       881:                                {
       882:                                    g_MoTeC1_data.AimLambda2            = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000D26 6E710008               MOV.B       @(8:16,SP),R1H
  00000D2A 1899                   SUB.B       R1L,R1L
  00000D2C 6E780009               MOV.B       @(9:16,SP),R0L
  00000D30 1750                   EXTU.W      R0
  00000D32 0901                   ADD.W       R0,R1
  00000D34 7A0200000000           MOV.L       #_g_MoTeC1_data,ER2
  00000D3A 6FA10026               MOV.W       R1,@(H'0026:16,ER2)
       883:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       884:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       885:                                    g_MoTeC1_data.IgnitionAdvance       = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000D3E 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000D42 1899                   SUB.B       R1L,R1L
  00000D44 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000D48 0901                   ADD.W       R0,R1
  00000D4A 6FA10028               MOV.W       R1,@(H'0028:16,ER2)
  00000D4E 5A000000               JMP         @L7833:24
  00000D52                    L7837:                                
       886:                                    can_rcv_cnt ++;
       887:                                }
       888:                                else if (can_rcv_cnt == 11) // 11
  00000D52 7920000B               CMP.W       #H'000B:16,R0
  00000D56 58700000               BEQ         L7833:16
       889:                                {
       890:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       891:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       892:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       893:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       894:                                    can_rcv_cnt ++;
       895:                                }
       896:                                else if (can_rcv_cnt == 12) // 12
  00000D5A 7920000C               CMP.W       #H'000C:16,R0
  00000D5E 58700000               BEQ         L7833:16
       897:                                {
       898:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       899:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       900:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       901:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       902:                                    can_rcv_cnt ++;
       903:                                }
       904:                                else if (can_rcv_cnt == 13) // 13
  00000D62 7920000D               CMP.W       #H'000D:16,R0
  00000D66 58700000               BEQ         L7833:16
       905:                                {
       906:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       907:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       908:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       909:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       910:                                    can_rcv_cnt ++;
       911:                                }
       912:                                else if (can_rcv_cnt == 14) // 14
  00000D6A 7920000E               CMP.W       #H'000E:16,R0
  00000D6E 4600                   BNE         L7842:8
       913:                                {
       914:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       915:                                    g_MoTeC1_data.InjectorDuty          = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000D70 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000D74 1899                   SUB.B       R1L,R1L
  00000D76 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000D7A 1750                   EXTU.W      R0
  00000D7C 0901                   ADD.W       R0,R1
  00000D7E 7A0200000000           MOV.L       #_g_MoTeC1_data,ER2
  00000D84 6FA1002A               MOV.W       R1,@(H'002A:16,ER2)
       916:                                    g_MoTeC1_data.Gear                  = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000D88 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000D8C 1899                   SUB.B       R1L,R1L
  00000D8E 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000D92 0901                   ADD.W       R0,R1
  00000D94 6FA1002C               MOV.W       R1,@(H'002C:16,ER2)
  00000D98 4000                   BRA         L7833:8
  00000D9A                    L7842:                                
       917:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       918:                                    can_rcv_cnt ++;
       919:                                }
       920:                                else if (can_rcv_cnt == 15) // 15
  00000D9A 7920000F               CMP.W       #H'000F:16,R0
  00000D9E 4700                   BEQ         L7833:8
       921:                                {
       922:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       923:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       924:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       925:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       926:                                    can_rcv_cnt ++;
       927:                                }
       928:                                else if (can_rcv_cnt == 16) // 16
  00000DA0 79200010               CMP.W       #H'0010:16,R0
  00000DA4 4700                   BEQ         L7833:8
       929:                                {
       930:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       931:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       932:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       933:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       934:                                    can_rcv_cnt ++;
       935:                                }
       936:                                else if (can_rcv_cnt == 17) // 17
  00000DA6 79200011               CMP.W       #H'0011:16,R0
  00000DAA 4700                   BEQ         L7833:8
       937:                                {
       938:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       939:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       940:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       941:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       942:                                    can_rcv_cnt ++;
       943:                                }
       944:                                else if (can_rcv_cnt == 18) // 18
  00000DAC 79200012               CMP.W       #H'0012:16,R0
  00000DB0 4700                   BEQ         L7833:8
       945:                                {
       946:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       947:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       948:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       949:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       950:                                    can_rcv_cnt ++;
       951:                                }
       952:                                else if (can_rcv_cnt == 19) // 19
  00000DB2 79200013               CMP.W       #H'0013:16,R0
  00000DB6 4700                   BEQ         L7833:8
       953:                                {
       954:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       955:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       956:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       957:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       958:                                    can_rcv_cnt ++;
       959:                                }
       960:                                else if (can_rcv_cnt == 20) // 20
  00000DB8 79200014               CMP.W       #H'0014:16,R0
  00000DBC 4700                   BEQ         L7833:8
       961:                                {
       962:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       963:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       964:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       965:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       966:                                    can_rcv_cnt ++;
       967:                                }
       968:                                else if (can_rcv_cnt == 21) // 21
  00000DBE 79200015               CMP.W       #H'0015:16,R0
  00000DC2 58600000               BNE         L7648:16
  00000DC6 4000                   BRA         L7833:8
  00000DC8                    L7831:                                
  00000DC8 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000DCC 1899                   SUB.B       R1L,R1L
  00000DCE 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000DD2 1750                   EXTU.W      R0
  00000DD4 0901                   ADD.W       R0,R1
  00000DD6 6BA100000000           MOV.W       R1,@(_g_MoTeC1_data+H'00000022):32
  00000DDC                    L7833:                                
  00000DDC 6B38000000000A10       ADD.W       #1:3,@__$can_rcv_cnt$8:32
  00000DE4 5A000000               JMP         @L7648:24
  00000DE8                    L7809:                                
       969:                                {
       970:                                    // N/A                              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       971:                                    // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       972:                                    // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       973:                                    // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       974:                                    can_rcv_cnt ++;
       975:                                }
       976:                                default: break;
       977:                }
       978:            }
       979:            else if (g_e2p_data.E2P_1.model == Haltech1)
  00000DE8 6A3800000000A002       CMP.B       #2:8,@(_g_e2p_data+2):32
  00000DF0 58600000               BNE         L7850:16
       980:            {
       981:                switch(msgID)
  00000DF4 6F700010               MOV.W       @(H'0010:16,SP),R0
  00000DF8 0D01                   MOV.W       R0,R1
  00000DFA E800                   AND.B       #0:8,R0L
  00000DFC 0D00                   MOV.W       R0,R0
  00000DFE 58600000               BNE         L7648:16
  00000E02 A910                   CMP.B       #H'10:8,R1L
  00000E04 58700000               BEQ         L7651:16
  00000E08 A911                   CMP.B       #H'11:8,R1L
  00000E0A 58700000               BEQ         L7652:16
  00000E0E A912                   CMP.B       #H'12:8,R1L
  00000E10 4700                   BEQ         L7653:8
  00000E12 A913                   CMP.B       #H'13:8,R1L
  00000E14 58600000               BNE         L7648:16
       982:                {
       983:                    case 0x010:
       984:                                g_Haltech1_data.RPM                 = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       985:                                g_Haltech1_data.GroundSpeed         = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       986:                                g_Haltech1_data.OilPressure         = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       987:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       988:                                break;
       989:                    case 0x011:
       990:                                g_Haltech1_data.EngineTemp          = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       991:                                g_Haltech1_data.FuelPressure        = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       992:                                g_Haltech1_data.BatteryVoltage      = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       993:                                g_Haltech1_data.ThrottlePosition    = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
       994:                                break;
       995:                    case 0x012:
       996:                                g_Haltech1_data.ManifoldPressure    = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
       997:                                g_Haltech1_data.InletAirTemp        = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
       998:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
       999:                                g_Haltech1_data.Lambda              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
      1000:                                break;
      1001:                    case 0x013:
      1002:                                g_Haltech1_data.IgnitionAdvance     = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000E18 6E710008               MOV.B       @(8:16,SP),R1H
  00000E1C 1899                   SUB.B       R1L,R1L
  00000E1E 6E780009               MOV.B       @(9:16,SP),R0L
  00000E22 1750                   EXTU.W      R0
  00000E24 0901                   ADD.W       R0,R1
  00000E26 7A0200000000           MOV.L       #_g_Haltech1_data,ER2
  00000E2C 6FA10014               MOV.W       R1,@(H'0014:16,ER2)
      1003:                                g_Haltech1_data.Gear                = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000E30 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000E34 1899                   SUB.B       R1L,R1L
  00000E36 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000E3A 0901                   ADD.W       R0,R1
  00000E3C 6FA10016               MOV.W       R1,@(H'0016:16,ER2)
      1004:                                g_Haltech1_data.InjectorDuty        = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000E40 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000E44 1899                   SUB.B       R1L,R1L
  00000E46 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000E4A 0901                   ADD.W       R0,R1
  00000E4C 6FA10018               MOV.W       R1,@(H'0018:16,ER2)
  00000E50 5A000000               JMP         @L7648:24
  00000E54                    L7653:                                
  00000E54 6E710008               MOV.B       @(8:16,SP),R1H
  00000E58 1899                   SUB.B       R1L,R1L
  00000E5A 6E780009               MOV.B       @(9:16,SP),R0L
  00000E5E 1750                   EXTU.W      R0
  00000E60 0901                   ADD.W       R0,R1
  00000E62 7A0200000000           MOV.L       #_g_Haltech1_data,ER2
  00000E68 6FA1000E               MOV.W       R1,@(H'000E:16,ER2)
  00000E6C 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000E70 1899                   SUB.B       R1L,R1L
  00000E72 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000E76 0901                   ADD.W       R0,R1
  00000E78 6FA10010               MOV.W       R1,@(H'0010:16,ER2)
  00000E7C 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000E80 1899                   SUB.B       R1L,R1L
  00000E82 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000E86 0901                   ADD.W       R0,R1
  00000E88 6FA10012               MOV.W       R1,@(H'0012:16,ER2)
  00000E8C 5A000000               JMP         @L7648:24
  00000E90                    L7652:                                
  00000E90 6E710008               MOV.B       @(8:16,SP),R1H
  00000E94 1899                   SUB.B       R1L,R1L
  00000E96 6E780009               MOV.B       @(9:16,SP),R0L
  00000E9A 1750                   EXTU.W      R0
  00000E9C 0901                   ADD.W       R0,R1
  00000E9E 7A0200000000           MOV.L       #_g_Haltech1_data,ER2
  00000EA4 6FA10006               MOV.W       R1,@(6:16,ER2)
  00000EA8 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000EAC 1899                   SUB.B       R1L,R1L
  00000EAE 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000EB2 0901                   ADD.W       R0,R1
  00000EB4 6FA10008               MOV.W       R1,@(8:16,ER2)
  00000EB8 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000EBC 1899                   SUB.B       R1L,R1L
  00000EBE 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000EC2 0901                   ADD.W       R0,R1
  00000EC4 6FA1000A               MOV.W       R1,@(H'000A:16,ER2)
  00000EC8 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000ECC 1899                   SUB.B       R1L,R1L
  00000ECE 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000ED2 0901                   ADD.W       R0,R1
  00000ED4 6FA1000C               MOV.W       R1,@(H'000C:16,ER2)
  00000ED8 5A000000               JMP         @L7648:24
  00000EDC                    L7651:                                
  00000EDC 6E710008               MOV.B       @(8:16,SP),R1H
  00000EE0 1899                   SUB.B       R1L,R1L
  00000EE2 6E780009               MOV.B       @(9:16,SP),R0L
  00000EE6 1750                   EXTU.W      R0
  00000EE8 0901                   ADD.W       R0,R1
  00000EEA 7A0200000000           MOV.L       #_g_Haltech1_data,ER2
  00000EF0 69A1                   MOV.W       R1,@ER2
  00000EF2 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000EF6 1899                   SUB.B       R1L,R1L
  00000EF8 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000EFC 0901                   ADD.W       R0,R1
  00000EFE 6FA10002               MOV.W       R1,@(2:16,ER2)
  00000F02 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000F06 1899                   SUB.B       R1L,R1L
  00000F08 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000F0C 0901                   ADD.W       R0,R1
  00000F0E 6FA10004               MOV.W       R1,@(4:16,ER2)
  00000F12 5A000000               JMP         @L7648:24
  00000F16                    L7850:                                
      1005:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
      1006:                                default: break;
      1007:                }
      1008:            }
      1009:            else if (g_e2p_data.E2P_1.model == Haltech2)
  00000F16 6A3800000000A003       CMP.B       #3:8,@(_g_e2p_data+2):32
  00000F1E 58600000               BNE         L7648:16
      1010:            {
      1011:                switch(msgID)
  00000F22 6F700010               MOV.W       @(H'0010:16,SP),R0
  00000F26 79200360               CMP.W       #H'0360:16,R0
  00000F2A 58700000               BEQ         L7656:16
  00000F2E 79200361               CMP.W       #H'0361:16,R0
  00000F32 58700000               BEQ         L7657:16
  00000F36 79200362               CMP.W       #H'0362:16,R0
  00000F3A 58700000               BEQ         L7658:16
  00000F3E 79200368               CMP.W       #H'0368:16,R0
  00000F42 58700000               BEQ         L7659:16
  00000F46 79200370               CMP.W       #H'0370:16,R0
  00000F4A 58700000               BEQ         L7660:16
  00000F4E 79200372               CMP.W       #H'0372:16,R0
  00000F52 58700000               BEQ         L7661:16
  00000F56 79200373               CMP.W       #H'0373:16,R0
  00000F5A 4700                   BEQ         L7662:8
  00000F5C 792003E0               CMP.W       #H'03E0:16,R0
  00000F60 58600000               BNE         L7648:16
      1012:                {
      1013:                    case 0x360:
      1014:                                g_Haltech2_data.RPM                 = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
      1015:                                g_Haltech2_data.ManifoldPressure    = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
      1016:                                g_Haltech2_data.ThrottlePosition    = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
      1017:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
      1018:                                break;
      1019:                    case 0x361:
      1020:                                g_Haltech2_data.FuelPressure        = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
      1021:                                g_Haltech2_data.OilPressure         = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
      1022:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
      1023:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
      1024:                                break;
      1025:                    case 0x362:
      1026:                                g_Haltech2_data.InjectorDuty        = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
      1027:                                // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
      1028:                                g_Haltech2_data.IgnitionAdvance1    = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
      1029:                                g_Haltech2_data.IgnitionAdvance2    = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
      1030:                                break;
      1031:                    case 0x368:
      1032:                                g_Haltech2_data.Lambda              = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
      1033:                                // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
      1034:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
      1035:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
      1036:                                break;
      1037:                    case 0x370:
      1038:                                g_Haltech2_data.GroundSpeed         = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
      1039:                                g_Haltech2_data.Gear                = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
      1040:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
      1041:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
      1042:                                break;
      1043:                    case 0x372:
      1044:                                g_Haltech2_data.BatteryVoltage      = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
      1045:                                g_Haltech2_data.InletAirTemp2       = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
      1046:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
      1047:                                g_Haltech2_data.BaroPressure        = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
      1048:                                break;
      1049:                    case 0x373:
      1050:                                g_Haltech2_data.EGT                 = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
      1051:                                // N/A                              = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
      1052:                                // N/A                              = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
      1053:                                // N/A                              = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
      1054:                                break;
      1055:                    case 0x3E0:
      1056:                                g_Haltech2_data.EngineTemp          = ((((unsigned int) can_rcv[6] ) << 8) + can_rcv[7] );
  00000F64 6E710008               MOV.B       @(8:16,SP),R1H
  00000F68 1899                   SUB.B       R1L,R1L
  00000F6A 6E780009               MOV.B       @(9:16,SP),R0L
  00000F6E 1750                   EXTU.W      R0
  00000F70 0901                   ADD.W       R0,R1
  00000F72 7A0200000000           MOV.L       #_g_Haltech2_data,ER2
  00000F78 6FA1001E               MOV.W       R1,@(H'001E:16,ER2)
      1057:                                g_Haltech2_data.InletAirTemp1       = ((((unsigned int) can_rcv[8] ) << 8) + can_rcv[9] );
  00000F7C 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000F80 1899                   SUB.B       R1L,R1L
  00000F82 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000F86 0901                   ADD.W       R0,R1
  00000F88 6FA10020               MOV.W       R1,@(H'0020:16,ER2)
      1058:                                g_Haltech2_data.FuelTemp            = ((((unsigned int) can_rcv[10]) << 8) + can_rcv[11]);
  00000F8C 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00000F90 1899                   SUB.B       R1L,R1L
  00000F92 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  00000F96 0901                   ADD.W       R0,R1
  00000F98 6FA10022               MOV.W       R1,@(H'0022:16,ER2)
      1059:                                g_Haltech2_data.OilTemp             = ((((unsigned int) can_rcv[12]) << 8) + can_rcv[13]);
  00000F9C 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000FA0 1899                   SUB.B       R1L,R1L
  00000FA2 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000FA6 0901                   ADD.W       R0,R1
  00000FA8 6FA10024               MOV.W       R1,@(H'0024:16,ER2)
  00000FAC 5A000000               JMP         @L7648:24
  00000FB0                    L7662:                                
  00000FB0 6E710008               MOV.B       @(8:16,SP),R1H
  00000FB4 1899                   SUB.B       R1L,R1L
  00000FB6 6E780009               MOV.B       @(9:16,SP),R0L
  00000FBA 1750                   EXTU.W      R0
  00000FBC 0901                   ADD.W       R0,R1
  00000FBE 6BA100000000           MOV.W       R1,@(_g_Haltech2_data+H'0000001C):32
  00000FC4 5A000000               JMP         @L7648:24
  00000FC8                    L7661:                                
  00000FC8 6E710008               MOV.B       @(8:16,SP),R1H
  00000FCC 1899                   SUB.B       R1L,R1L
  00000FCE 6E780009               MOV.B       @(9:16,SP),R0L
  00000FD2 1750                   EXTU.W      R0
  00000FD4 0901                   ADD.W       R0,R1
  00000FD6 7A0200000000           MOV.L       #_g_Haltech2_data,ER2
  00000FDC 6FA10016               MOV.W       R1,@(H'0016:16,ER2)
  00000FE0 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00000FE4 1899                   SUB.B       R1L,R1L
  00000FE6 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00000FEA 0901                   ADD.W       R0,R1
  00000FEC 6FA10018               MOV.W       R1,@(H'0018:16,ER2)
  00000FF0 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00000FF4 1899                   SUB.B       R1L,R1L
  00000FF6 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  00000FFA 0901                   ADD.W       R0,R1
  00000FFC 6FA1001A               MOV.W       R1,@(H'001A:16,ER2)
  00001000 5A000000               JMP         @L7648:24
  00001004                    L7660:                                
  00001004 6E710008               MOV.B       @(8:16,SP),R1H
  00001008 1899                   SUB.B       R1L,R1L
  0000100A 6E780009               MOV.B       @(9:16,SP),R0L
  0000100E 1750                   EXTU.W      R0
  00001010 0901                   ADD.W       R0,R1
  00001012 7A0200000000           MOV.L       #_g_Haltech2_data,ER2
  00001018 6FA10012               MOV.W       R1,@(H'0012:16,ER2)
  0000101C 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  00001020 1899                   SUB.B       R1L,R1L
  00001022 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  00001026 0901                   ADD.W       R0,R1
  00001028 6FA10014               MOV.W       R1,@(H'0014:16,ER2)
  0000102C 5A000000               JMP         @L7648:24
  00001030                    L7659:                                
  00001030 6E710008               MOV.B       @(8:16,SP),R1H
  00001034 1899                   SUB.B       R1L,R1L
  00001036 6E780009               MOV.B       @(9:16,SP),R0L
  0000103A 1750                   EXTU.W      R0
  0000103C 0901                   ADD.W       R0,R1
  0000103E 6BA100000000           MOV.W       R1,@(_g_Haltech2_data+H'00000010):32
  00001044 5A000000               JMP         @L7648:24
  00001048                    L7658:                                
  00001048 6E710008               MOV.B       @(8:16,SP),R1H
  0000104C 1899                   SUB.B       R1L,R1L
  0000104E 6E780009               MOV.B       @(9:16,SP),R0L
  00001052 1750                   EXTU.W      R0
  00001054 0901                   ADD.W       R0,R1
  00001056 7A0200000000           MOV.L       #_g_Haltech2_data,ER2
  0000105C 6FA1000A               MOV.W       R1,@(H'000A:16,ER2)
  00001060 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  00001064 1899                   SUB.B       R1L,R1L
  00001066 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  0000106A 0901                   ADD.W       R0,R1
  0000106C 6FA1000C               MOV.W       R1,@(H'000C:16,ER2)
  00001070 6E71000E               MOV.B       @(H'000E:16,SP),R1H
  00001074 1899                   SUB.B       R1L,R1L
  00001076 6E78000F               MOV.B       @(H'000F:16,SP),R0L
  0000107A 0901                   ADD.W       R0,R1
  0000107C 6FA1000E               MOV.W       R1,@(H'000E:16,ER2)
  00001080 4000                   BRA         L7648:8
  00001082                    L7657:                                
  00001082 6E710008               MOV.B       @(8:16,SP),R1H
  00001086 1899                   SUB.B       R1L,R1L
  00001088 6E780009               MOV.B       @(9:16,SP),R0L
  0000108C 1750                   EXTU.W      R0
  0000108E 0901                   ADD.W       R0,R1
  00001090 7A0200000000           MOV.L       #_g_Haltech2_data,ER2
  00001096 6FA10006               MOV.W       R1,@(6:16,ER2)
  0000109A 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  0000109E 1899                   SUB.B       R1L,R1L
  000010A0 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000010A4 0901                   ADD.W       R0,R1
  000010A6 6FA10008               MOV.W       R1,@(8:16,ER2)
  000010AA 4000                   BRA         L7648:8
  000010AC                    L7656:                                
  000010AC 6E710008               MOV.B       @(8:16,SP),R1H
  000010B0 1899                   SUB.B       R1L,R1L
  000010B2 6E780009               MOV.B       @(9:16,SP),R0L
  000010B6 1750                   EXTU.W      R0
  000010B8 0901                   ADD.W       R0,R1
  000010BA 7A0200000000           MOV.L       #_g_Haltech2_data,ER2
  000010C0 69A1                   MOV.W       R1,@ER2
  000010C2 6E71000A               MOV.B       @(H'000A:16,SP),R1H
  000010C6 1899                   SUB.B       R1L,R1L
  000010C8 6E78000B               MOV.B       @(H'000B:16,SP),R0L
  000010CC 0901                   ADD.W       R0,R1
  000010CE 6FA10002               MOV.W       R1,@(2:16,ER2)
  000010D2 6E71000C               MOV.B       @(H'000C:16,SP),R1H
  000010D6 1899                   SUB.B       R1L,R1L
  000010D8 6E78000D               MOV.B       @(H'000D:16,SP),R0L
  000010DC 0901                   ADD.W       R0,R1
  000010DE 6FA10004               MOV.W       R1,@(4:16,ER2)
  000010E2                    L7648:                                
      1060:                                default: break;
      1061:                }
      1062:            }
      1063:        }
      1064:        
      1065:        CANWriteReg(CANINTF, 0x00);
  000010E2 7900002C               MOV.W       #H'002C:16,R0
  000010E6 5E000000               JSR         @_CANWriteReg:24
  000010EA 79170012               ADD.W       #H'0012:16,R7
  000010EE 01006D76               POP.L       ER6
  000010F2 5435                   RTS/L       (ER2-ER5)
      1066:    }
      1067:    
      1068:    volatile unsigned long dmy;
      1069:    
      1070:    // --------------------------------------------------------------------
      1071:    // 定期割り込みルーチン 50mSec毎
      1072:    // --------------------------------------------------------------------
      1073:    void Int_50msFunc(void)
  000010F4                    _Int_50msFunc:                       ; function: Int_50msFunc
  000010F4 01306DF2               STM.L       (ER2-ER5),@-SP
  000010F8 01006DF6               PUSH.L      ER6
      1074:    {
      1075:        // --------------------------------------------------------------------
      1076:        // ローカル変数宣言
      1077:        // --------------------------------------------------------------------
      1078:        unsigned long i;
      1079:        
      1080:        // --------------------------------------------------------------------
      1081:        // 割り込みフラグクリア
      1082:        // --------------------------------------------------------------------
      1083:        TPU0.TSR.BIT.TGFA = 0;
  000010FC 7A0600000000           MOV.L       #_g_master_warning_flg1,ER6
  00001102 7FC57200               BCLR.B      #0,@H'00FFFFC5:8
      1084:        
      1085:        // --------------------------------------------------------------------
      1086:        // TFT LCD リフレッシュ処理
      1087:        // --------------------------------------------------------------------
      1088:        Display_Home();
  00001106 5E000000               JSR         @_Display_Home:24
      1089:        g_refresh_done = 1;
  0000110A 0F12                   MOV.W       #1:3,R2
  0000110C 6BA200000000           MOV.W       R2,@_g_refresh_done:32
      1090:        
      1091:        // --------------------------------------------------------------------
      1092:        // 50msecカウンタインクリメント
      1093:        // --------------------------------------------------------------------
      1094:        g_int50mscnt ++;
  00001112 010E481000000000       ADD.L       #1:16,@_g_int50mscnt:32
           0001               
      1095:        
      1096:        // --------------------------------------------------------------------
      1097:        // マスターワーニング処理
      1098:        // --------------------------------------------------------------------
      1099:        if ((g_e2p_data.E2P_1.control.BIT.ms_on == 0)
  0000111C 6A30000000007760       BLD.B       #6,@(_g_e2p_data+3):32
  00001124 4500                   BCS         L7878:8
  00001126 7DE01F10               CMP.W       #1:3,@ER6
  0000112A 4700                   BEQ         L7880:8
  0000112C 6B38000000001F10       CMP.W       #1:3,@_g_master_warning_flg2:32
  00001134 4700                   BEQ         L7880:8
  00001136 6B38000000001F10       CMP.W       #1:3,@_g_master_warning_flg3:32
  0000113E 4700                   BEQ         L7880:8
  00001140 6B38000000001F10       CMP.W       #1:3,@_g_master_warning_flg4:32
  00001148 4700                   BEQ         L7880:8
  0000114A 6B38000000001F10       CMP.W       #1:3,@_g_master_warning_flg5:32
  00001152 4700                   BEQ         L7880:8
  00001154 6B38000000001F10       CMP.W       #1:3,@_g_master_warning_flg6:32
  0000115C 4600                   BNE         L7878:8
  0000115E                    L7880:                                
      1100:        && ((g_master_warning_flg1 == 1)
      1101:        ||  (g_master_warning_flg2 == 1)
      1102:        ||  (g_master_warning_flg3 == 1)
      1103:        ||  (g_master_warning_flg4 == 1)
      1104:        ||  (g_master_warning_flg5 == 1)
      1105:        ||  (g_master_warning_flg6 == 1)))
      1106:        {
      1107:            master_warning_cnt ++;
  0000115E 7A0100000000           MOV.L       #__$master_warning_cnt,ER1
  00001164 6910                   MOV.W       @ER1,R0
  00001166 0B50                   INC.W       #1,R0
  00001168 6990                   MOV.W       R0,@ER1
      1108:            if(master_warning_cnt == 1)
  0000116A 1F10                   CMP.W       #1:3,R0
  0000116C 4600                   BNE         L7886:8
      1109:            {
      1110:                Beep_OneShotMax();
  0000116E 6BA200000000           MOV.W       R2,@_g_beep_oneshotmax_flg:32
  00001174 5A000000               JMP         @L7887:24
  00001178                    L7886:                                
      1111:            }
      1112:            else if(master_warning_cnt >= 10)
  00001178 7920000A               CMP.W       #H'000A:16,R0
  0000117C 58500000               BLO         L7887:16
      1113:            {
      1114:                master_warning_cnt = 0;
  00001180 1900                   SUB.W       R0,R0
  00001182 6990                   MOV.W       R0,@ER1
  00001184 5A000000               JMP         @L7887:24
  00001188                    L7878:                                
      1115:            }
      1116:        }
      1117:        // --------------------------------------------------------------------
      1118:        // シフトタイミングランプ処理
      1119:        // --------------------------------------------------------------------
      1120:        else if(g_shift_timing_flg == 3)
  00001188 6B38000000001F30       CMP.W       #3:3,@_g_shift_timing_flg:32
  00001190 4600                   BNE         L7890:8
      1121:        {
      1122:            g_shift_timing_cnt ++;
  00001192 6B2000000000           MOV.W       @__$g_shift_timing_cnt:32,R0
  00001198 0B50                   INC.W       #1,R0
  0000119A 6BA000000000           MOV.W       R0,@__$g_shift_timing_cnt:32
      1123:            
      1124:            if(g_shift_timing_cnt == 1)
  000011A0 1F10                   CMP.W       #1:3,R0
  000011A2 4700                   BEQ         L7892:8
      1125:            {
      1126:                Led_R_Min_ON();
      1127:                Led_O_Min_ON();
      1128:            }
      1129:            else if(g_shift_timing_cnt == 2)
  000011A4 1F20                   CMP.W       #2:3,R0
  000011A6 4600                   BNE         L7887:8
      1130:            {
      1131:                Led_R_Min_OFF();
  000011A8 6BF000000000           MOV.W       #0:4,@_g_led_r_min_flg:32
      1132:                Led_O_Min_OFF();
  000011AE 6BF000000000           MOV.W       #0:4,@_g_led_o_min_flg:32
      1133:                g_shift_timing_cnt = 0;
  000011B4 1900                   SUB.W       R0,R0
  000011B6 6BA000000000           MOV.W       R0,@__$g_shift_timing_cnt:32
  000011BC 4000                   BRA         L7887:8
  000011BE                    L7890:                                
      1134:            }
      1135:        }
      1136:        else if(g_shift_timing_flg == 2)
  000011BE 6B38000000001F20       CMP.W       #2:3,@_g_shift_timing_flg:32
  000011C6 4700                   BEQ         L7892:8
      1137:        {
      1138:            Led_R_Min_ON();
      1139:            Led_O_Min_ON();
      1140:        }
      1141:        else if(g_shift_timing_flg == 1)
  000011C8 6B38000000001F10       CMP.W       #1:3,@_g_shift_timing_flg:32
  000011D0 4600                   BNE         L7896:8
      1142:        {
      1143:            Led_R_Min_OFF();
  000011D2 6BF000000000           MOV.W       #0:4,@_g_led_r_min_flg:32
  000011D8 4000                   BRA         L7897:8
  000011DA                    L7896:                                
      1144:            Led_O_Min_ON();
      1145:        }
      1146:        else
      1147:        {
      1148:            master_warning_cnt = 0;
  000011DA 1900                   SUB.W       R0,R0
  000011DC 6BA000000000           MOV.W       R0,@__$master_warning_cnt:32
      1149:            Led_R_Min_OFF();
  000011E2 6BF000000000           MOV.W       #0:4,@_g_led_r_min_flg:32
      1150:            Led_O_Min_OFF();
  000011E8 6BF000000000           MOV.W       #0:4,@_g_led_o_min_flg:32
  000011EE 4000                   BRA         L7887:8
  000011F0                    L7892:                                
  000011F0 6BA200000000           MOV.W       R2,@_g_led_r_min_flg:32
  000011F6                    L7897:                                
  000011F6 6BA200000000           MOV.W       R2,@_g_led_o_min_flg:32
  000011FC                    L7887:                                
      1151:        }
      1152:        
      1153:        // --------------------------------------------------------------------
      1154:        // タッチパネル入力処理
      1155:        // --------------------------------------------------------------------
      1156:        Touch_Read();
  000011FC 7A0400000000           MOV.L       #_g_TouchY,ER4
  00001202 5E000000               JSR         @_Touch_Read:24
      1157:        
      1158:        // --------------------------------------------------------------------
      1159:        // タッチパネル押下判断
      1160:        // --------------------------------------------------------------------
      1161:        Touch_Decision();
      1162:        
      1163:        // --------------------------------------------------------------------
      1164:        // ブザー制御
      1165:        // --------------------------------------------------------------------
      1166:        if(g_e2p_data.E2P_1.control.BIT.beep_on == 0)   // ブザー on/off 設定により有効の時
      1167:        {
      1168:            Beep_OneShotMin_control();                  // 小ブザー 1ショット 処理
      1169:            Beep_OneShotMax_control();                  // 大ブザー 1ショット 処理
      1170:            Beep_TwoShotMin_control();                  // 小ブザー 2ショット 処理
      1171:        }
      1172:        else                                            // ブザー on/off 設定により無効の時
      1173:        {
      1174:            TPU3.TGRD = 0x0000;
      1175:            g_beep_oneshotmin_flg = 0;
      1176:            Beep_OneShotMin_cnt = 0;
      1177:            g_beep_oneshotmax_flg = 0;
      1178:            Beep_OneShotMax_cnt = 0;
      1179:            g_beep_twoshotmin_flg = 0;
      1180:            Beep_TwoShotMin_cnt = 0;
      1181:        }
      1182:        // --------------------------------------------------------------------
      1183:        // FPS計測カウンタインクリメント
      1184:        // --------------------------------------------------------------------
      1185:        g_fps_cnt ++;
      1186:        if(g_fps_cnt == 20)
      1187:        {
      1188:            g_fps_max = g_fps;
      1189:            g_fps = 0;
      1190:            g_fps_cnt = 0;
      1191:        }
      1192:        else
      1193:        {
      1194:            //
      1195:        }
      1196:        
      1197:        // --------------------------------------------------------------------
      1198:        // EXDMA転送時間待機
      1199:        // --------------------------------------------------------------------
      1200:        for(i = 0; i <= 60000; i++) dmy = i;
      1201:    }
      1202:    
      1203:    
      1204:    // --------------------------------------------------------------------
      1205:    // タッチパネル押下判断
      1206:    // --------------------------------------------------------------------
      1207:    static void Touch_Decision(void)
      1208:    {
      1209:        if((g_TouchX != 0) || (g_TouchY != 0))              // タッチ無しでは無い場合
  00001206 6B2000000000           MOV.W       @_g_TouchX:32,R0
  0000120C 4600                   BNE         L7899:8
  0000120E 6940                   MOV.W       @ER4,R0
  00001210 4700                   BEQ         L7900:8
  00001212                    L7899:                                
      1210:        {
      1211:            if((g_TouchX != 999) || (g_TouchY != 999))      // 半押し判定では無い場合
  00001212 015E482000000000       CMP.W       #H'03E7:16,@_g_TouchX:32
           03E7               
  0000121C 4600                   BNE         L7902:8
  0000121E 015E042003E7           CMP.W       #H'03E7:16,@ER4
  00001224 4600                   BNE         L7902:8
  00001226                    L7900:                                
  00001226 1900                   SUB.W       R0,R0
  00001228 6BA000000000           MOV.W       R0,@__$touch_cnt:32
  0000122E 4000                   BRA         L7903:8
  00001230                    L7902:                                
      1212:            {
      1213:                touch_cnt ++;       // 押下時カウントアップ
  00001230 7A0100000000           MOV.L       #__$touch_cnt,ER1
  00001236 6910                   MOV.W       @ER1,R0
  00001238 0B50                   INC.W       #1,R0
      1214:                if(touch_cnt > 10)
  0000123A 7920000A               CMP.W       #H'000A:16,R0
  0000123E 4300                   BLS         L7991:8
      1215:                touch_cnt = 10;     // リミット
  00001240 7900000A               MOV.W       #H'000A:16,R0
  00001244                    L7991:                                
  00001244 6990                   MOV.W       R0,@ER1
  00001246                    L7903:                                
      1216:            }
      1217:            else
      1218:            {
      1219:                touch_cnt = 0;      // リリースクリア
      1220:            }
      1221:        }
      1222:        else
      1223:        {
      1224:            touch_cnt = 0;          // リリースクリア
      1225:        }
      1226:        
      1227:        if(touch_cnt == 1)          // 押下1回につき
  00001246 1F10                   CMP.W       #1:3,R0
  00001248 58600000               BNE         L7906:16
      1228:        {
      1229:            // マスターワーニング解除
      1230:            if(g_master_warning_flg1 == 1)g_master_warning_flg1 = 2;
  0000124C 7DE01F10               CMP.W       #1:3,@ER6
  00001250 4600                   BNE         L7908:8
  00001252 015D0602               MOV.W       #2:8,@ER6
  00001256                    L7908:                                
      1231:            if(g_master_warning_flg2 == 1)g_master_warning_flg2 = 2;
  00001256 7A0100000000           MOV.L       #_g_master_warning_flg2,ER1
  0000125C 7D901F10               CMP.W       #1:3,@ER1
  00001260 4600                   BNE         L7910:8
  00001262 015D0102               MOV.W       #2:8,@ER1
  00001266                    L7910:                                
      1232:            if(g_master_warning_flg3 == 1)g_master_warning_flg3 = 2;
  00001266 7A0100000000           MOV.L       #_g_master_warning_flg3,ER1
  0000126C 7D901F10               CMP.W       #1:3,@ER1
  00001270 4600                   BNE         L7912:8
  00001272 015D0102               MOV.W       #2:8,@ER1
  00001276                    L7912:                                
      1233:            if(g_master_warning_flg4 == 1)g_master_warning_flg4 = 2;
  00001276 7A0100000000           MOV.L       #_g_master_warning_flg4,ER1
  0000127C 7D901F10               CMP.W       #1:3,@ER1
  00001280 4600                   BNE         L7914:8
  00001282 015D0102               MOV.W       #2:8,@ER1
  00001286                    L7914:                                
      1234:            if(g_master_warning_flg5 == 1)g_master_warning_flg5 = 2;
  00001286 7A0100000000           MOV.L       #_g_master_warning_flg5,ER1
  0000128C 7D901F10               CMP.W       #1:3,@ER1
  00001290 4600                   BNE         L7916:8
  00001292 015D0102               MOV.W       #2:8,@ER1
  00001296                    L7916:                                
      1235:            if(g_master_warning_flg6 == 1)g_master_warning_flg6 = 2;
  00001296 7A0100000000           MOV.L       #_g_master_warning_flg6,ER1
  0000129C 7D901F10               CMP.W       #1:3,@ER1
  000012A0 4600                   BNE         L7918:8
  000012A2 015D0102               MOV.W       #2:8,@ER1
  000012A6                    L7918:                                
      1236:            Beep_OneShotMin();      // ブザー小
  000012A6 6BA200000000           MOV.W       R2,@_g_beep_oneshotmin_flg:32
      1237:            touch_done_flg = 1;     // タッチ押下判定発行
  000012AC 6BA200000000           MOV.W       R2,@_touch_done_flg:32
      1238:            g_PressX = g_TouchX;    // 押下X座標
  000012B2 0158484800000000       MOV.W       @_g_TouchX:32,@_g_PressX:32
           00000000           
      1239:            g_PressY = g_TouchY;
  000012BE 0158044800000000       MOV.W       @ER4,@_g_PressY:32
  000012C6                    L7906:                                
      1240:        }
      1241:        else
      1242:        {
      1243:            //
      1244:        }
      1245:        if(touch_cnt >= 2)          // 連続押下の時
  000012C6 1F20                   CMP.W       #2:3,R0
  000012C8 4500                   BLO         L7920:8
      1246:        {
      1247:        //  Beep_OneShotMin();      // ブザー小
      1248:            touch_drag_flg = 1;     // ドラッグ判定発行
  000012CA 6BA200000000           MOV.W       R2,@_touch_drag_flg:32
      1249:            g_DragX = g_TouchX;     // 押下X座標
  000012D0 0158484800000000       MOV.W       @_g_TouchX:32,@_g_DragX:32
           00000000           
      1250:            g_DragY = g_TouchY;
  000012DC 0158044800000000       MOV.W       @ER4,@_g_DragY:32
  000012E4                    L7920:                                
  000012E4 6A2800000000           MOV.B       @(_g_e2p_data+3):32,R0L
  000012EA 58B00000               BMI         L7922:16
      1251:        }
      1252:        else
      1253:        {
      1254:            //
      1255:        }
      1256:    }
      1257:    
      1258:    // --------------------------------------------------------------------
      1259:    // 小ブザー 1ショット 処理
      1260:    // --------------------------------------------------------------------
      1261:    static void Beep_OneShotMin_control(void)
      1262:    {
      1263:        if(g_beep_oneshotmin_flg == 1)
  000012EE 7A0300000000           MOV.L       #_g_beep_oneshotmin_flg,ER3
  000012F4 7DB01F10               CMP.W       #1:3,@ER3
  000012F8 4600                   BNE         L7924:8
      1264:        {
      1265:            g_beep_oneshotmin_flg = 2;
  000012FA 015D0302               MOV.W       #2:8,@ER3
      1266:            Beep_OneShotMin_cnt = 0;
  000012FE 1900                   SUB.W       R0,R0
  00001300 6BA000000000           MOV.W       R0,@__$Beep_OneShotMin_cnt:32
  00001306                    L7924:                                
      1267:        }
      1268:        else
      1269:        {
      1270:            //
      1271:        }
      1272:        
      1273:        if(g_beep_oneshotmin_flg == 2)
  00001306 7DB01F20               CMP.W       #2:3,@ER3
  0000130A 4600                   BNE         L7926:8
      1274:        {
      1275:            TPU3.TGRD = 0x0100;
  0000130C 797401004000FFFE       MOV.W       #H'0100:16,@H'00FFFFFE:16
      1276:            Beep_OneShotMin_cnt ++;
  00001314 7A0100000000           MOV.L       #__$Beep_OneShotMin_cnt,ER1
  0000131A 6910                   MOV.W       @ER1,R0
  0000131C 0B50                   INC.W       #1,R0
      1277:        
      1278:            if(Beep_OneShotMin_cnt >= 2)    // 0.1sec経過
  0000131E 1F20                   CMP.W       #2:3,R0
  00001320 4500                   BLO         L7992:8
      1279:            {
      1280:                TPU3.TGRD = 0x0000;
  00001322 6BD0FFFE               MOV.W       #0:4,@H'00FFFFFE:16
      1281:                g_beep_oneshotmin_flg = 0;
  00001326 015D0300               MOV.W       #0:8,@ER3
      1282:                Beep_OneShotMin_cnt = 0;
  0000132A 1900                   SUB.W       R0,R0
  0000132C                    L7992:                                
  0000132C 6990                   MOV.W       R0,@ER1
  0000132E                    L7926:                                
      1283:            }
      1284:            else
      1285:            {
      1286:                //
      1287:            }
      1288:        }
      1289:    }
      1290:    
      1291:    // --------------------------------------------------------------------
      1292:    // 大ブザー 1ショット 処理
      1293:    // --------------------------------------------------------------------
      1294:    static void Beep_OneShotMax_control(void)
      1295:    {
      1296:        if(g_beep_oneshotmax_flg == 1)
  0000132E 7A0300000000           MOV.L       #_g_beep_oneshotmax_flg,ER3
  00001334 7DB01F10               CMP.W       #1:3,@ER3
  00001338 4600                   BNE         L7929:8
      1297:        {
      1298:            g_beep_oneshotmax_flg = 2;
  0000133A 015D0302               MOV.W       #2:8,@ER3
      1299:            Beep_OneShotMax_cnt = 0;
  0000133E 1900                   SUB.W       R0,R0
  00001340 6BA000000000           MOV.W       R0,@__$Beep_OneShotMax_cnt:32
  00001346                    L7929:                                
      1300:        }
      1301:        else
      1302:        {
      1303:            //
      1304:        }
      1305:        
      1306:        if(g_beep_oneshotmax_flg == 2)
  00001346 7DB01F20               CMP.W       #2:3,@ER3
  0000134A 4600                   BNE         L7931:8
      1307:        {
      1308:            TPU3.TGRD = 0x0BB8;
  0000134C 79740BB84000FFFE       MOV.W       #H'0BB8:16,@H'00FFFFFE:16
      1309:            Led_R_Min_ON();
  00001354 7A0500000000           MOV.L       #_g_led_r_min_flg,ER5
  0000135A 69D2                   MOV.W       R2,@ER5
      1310:            Led_O_Min_OFF();
  0000135C 7A0400000000           MOV.L       #_g_led_o_min_flg,ER4
  00001362 015D0400               MOV.W       #0:8,@ER4
      1311:            Beep_OneShotMax_cnt ++;
  00001366 7A0100000000           MOV.L       #__$Beep_OneShotMax_cnt,ER1
  0000136C 6910                   MOV.W       @ER1,R0
  0000136E 0B50                   INC.W       #1,R0
      1312:        
      1313:            if(Beep_OneShotMax_cnt >= 5)    // 0.25sec経過
  00001370 1F50                   CMP.W       #5:3,R0
  00001372 4500                   BLO         L7993:8
      1314:            {
      1315:                TPU3.TGRD = 0x0000;
  00001374 6BD0FFFE               MOV.W       #0:4,@H'00FFFFFE:16
      1316:                Led_R_Min_OFF();
  00001378 015D0500               MOV.W       #0:8,@ER5
      1317:                Led_O_Min_OFF();
  0000137C 015D0400               MOV.W       #0:8,@ER4
      1318:                g_beep_oneshotmax_flg = 0;
  00001380 015D0300               MOV.W       #0:8,@ER3
      1319:                Beep_OneShotMax_cnt = 0;
  00001384 1900                   SUB.W       R0,R0
  00001386                    L7993:                                
  00001386 6990                   MOV.W       R0,@ER1
  00001388                    L7931:                                
      1320:            }
      1321:            else
      1322:            {
      1323:                //
      1324:            }
      1325:        }
      1326:    }
      1327:    
      1328:    // --------------------------------------------------------------------
      1329:    // 小ブザー 2ショット 処理
      1330:    // --------------------------------------------------------------------
      1331:    static void Beep_TwoShotMin_control(void)
      1332:    {
      1333:        if(g_beep_twoshotmin_flg == 1)
  00001388 7A0200000000           MOV.L       #_g_beep_twoshotmin_flg,ER2
  0000138E 7DA01F10               CMP.W       #1:3,@ER2
  00001392 4600                   BNE         L7934:8
      1334:        {
      1335:            g_beep_twoshotmin_flg = 2;
  00001394 015D0202               MOV.W       #2:8,@ER2
      1336:            Beep_TwoShotMin_cnt = 0;
  00001398 1900                   SUB.W       R0,R0
  0000139A 6BA000000000           MOV.W       R0,@__$Beep_TwoShotMin_cnt:32
  000013A0                    L7934:                                
      1337:        }
      1338:        else
      1339:        {
      1340:            //
      1341:        }
      1342:        
      1343:        if(g_beep_twoshotmin_flg == 2)
  000013A0 7DA01F20               CMP.W       #2:3,@ER2
  000013A4 4600                   BNE         L7936:8
      1344:        {
      1345:            Beep_TwoShotMin_cnt ++;
  000013A6 7A0100000000           MOV.L       #__$Beep_TwoShotMin_cnt,ER1
  000013AC 6910                   MOV.W       @ER1,R0
  000013AE 0B50                   INC.W       #1,R0
  000013B0 6990                   MOV.W       R0,@ER1
      1346:        
      1347:            if     (Beep_TwoShotMin_cnt == 1)   // 0.00sec経過
  000013B2 1F10                   CMP.W       #1:3,R0
  000013B4 4700                   BEQ         L7938:8
      1348:            {
      1349:                TPU3.TGRD = 0x0100;
      1350:            }
      1351:            else if(Beep_TwoShotMin_cnt == 2)   // 0.05sec経過
  000013B6 1F20                   CMP.W       #2:3,R0
  000013B8 4600                   BNE         L7940:8
      1352:            {
      1353:                TPU3.TGRD = 0x0000;
  000013BA 6BD0FFFE               MOV.W       #0:4,@H'00FFFFFE:16
  000013BE 4000                   BRA         L7936:8
  000013C0                    L7940:                                
      1354:            }
      1355:            else if(Beep_TwoShotMin_cnt == 3)   // 0.10sec経過
  000013C0 1F30                   CMP.W       #3:3,R0
  000013C2 4700                   BEQ         L7938:8
      1356:            {
      1357:                TPU3.TGRD = 0x0100;
      1358:            }
      1359:            else if(Beep_TwoShotMin_cnt >= 4)   // 0.20sec経過
  000013C4 1F40                   CMP.W       #4:3,R0
  000013C6 4500                   BLO         L7936:8
      1360:            {
      1361:                TPU3.TGRD = 0x0000;
  000013C8 6BD0FFFE               MOV.W       #0:4,@H'00FFFFFE:16
  000013CC 4000                   BRA         L7943:8
  000013CE                    L7938:                                
  000013CE 797401004000FFFE       MOV.W       #H'0100:16,@H'00FFFFFE:16
  000013D6 4000                   BRA         L7936:8
  000013D8                    L7922:                                
  000013D8 6BD0FFFE               MOV.W       #0:4,@H'00FFFFFE:16
  000013DC 6BF000000000           MOV.W       #0:4,@_g_beep_oneshotmin_flg:32
  000013E2 1900                   SUB.W       R0,R0
  000013E4 6BA000000000           MOV.W       R0,@__$Beep_OneShotMin_cnt:32
  000013EA 6BF000000000           MOV.W       #0:4,@_g_beep_oneshotmax_flg:32
  000013F0 6BA000000000           MOV.W       R0,@__$Beep_OneShotMax_cnt:32
  000013F6                    L7943:                                
  000013F6 6BF000000000           MOV.W       #0:4,@_g_beep_twoshotmin_flg:32
  000013FC 1900                   SUB.W       R0,R0
  000013FE 6BA000000000           MOV.W       R0,@__$Beep_TwoShotMin_cnt:32
  00001404                    L7936:                                
  00001404 6B38000000000A10       ADD.W       #1:3,@_g_fps_cnt:32
  0000140C 015E482000000000       CMP.W       #H'0014:16,@_g_fps_cnt:32
           0014               
  00001416 4600                   BNE         L7945:8
  00001418 0158484800000000       MOV.W       @_g_fps:32,@_g_fps_max:32
           00000000           
  00001424 6BF000000000           MOV.W       #0:4,@_g_fps:32
  0000142A 6BF000000000           MOV.W       #0:4,@_g_fps_cnt:32
  00001430                    L7945:                                
  00001430 1A80                   SUB.L       ER0,ER0
  00001432                    L7946:                                
  00001432 01006BA000000000       MOV.L       ER0,@_dmy:32
  0000143A 0B70                   INC.L       #1,ER0
  0000143C 7A28EA60               CMP.L       #H'EA60:16,ER0
  00001440 4300                   BLS         L7946:8
  00001442 01006D76               POP.L       ER6
  00001446 5435                   RTS/L       (ER2-ER5)
      1362:                g_beep_twoshotmin_flg = 0;
      1363:                Beep_TwoShotMin_cnt = 0;
      1364:            }
      1365:            else
      1366:            {
      1367:                //
      1368:            }
      1369:        }
      1370:    }
      1371:    
      1372:    // --------------------------------------------------------------------
      1373:    // 定期割り込みルーチン 50mSec毎
      1374:    // --------------------------------------------------------------------
      1375:    void Int_1msFunc(void)
  00001448                    _Int_1msFunc:                        ; function: Int_1msFunc
  00001448 01006DF2               PUSH.L      ER2
      1376:    {
      1377:        // --------------------------------------------------------------------
      1378:        // ローカル変数宣言
      1379:        // --------------------------------------------------------------------
      1380:        static unsigned long sci_rcv_cnt;
      1381:        
      1382:        // --------------------------------------------------------------------
      1383:        // 割り込みフラグクリア
      1384:        // --------------------------------------------------------------------
      1385:        TPU6.TSR.BIT.TGFA = 0;
  0000144C 6A18FB157200           BCLR.B      #0,@H'00FFFB15:16
      1386:        
      1387:        // --------------------------------------------------------------------
      1388:        // LED点灯処理
      1389:        // --------------------------------------------------------------------
      1390:        if      (LEDonoff_cnt == 0)
  00001452 7A0100000000           MOV.L       #__$LEDonoff_cnt,ER1
  00001458 6910                   MOV.W       @ER1,R0
  0000145A 4600                   BNE         L7950:8
      1391:        {
      1392:            if((g_led_o_max_flg) || (g_led_o_min_flg)) { PM.DR.BIT.B0 = 1;} else { PM.DR.BIT.B0 = 0; }
  0000145C 6B2000000000           MOV.W       @_g_led_o_max_flg:32,R0
  00001462 4600                   BNE         L7952:8
  00001464 6B2000000000           MOV.W       @_g_led_o_min_flg:32,R0
  0000146A 4600                   BNE         L7952:8
  0000146C 6A18EE517200           BCLR.B      #0,@H'00FFEE51:16
  00001472 4000                   BRA         L7954:8
  00001474                    L7952:                                
  00001474 6A18EE517000           BSET.B      #0,@H'00FFEE51:16
  0000147A                    L7954:                                
      1393:            if((g_led_r_max_flg) || (g_led_r_min_flg)) { PB.DR.BIT.B3 = 1;} else { PB.DR.BIT.B3 = 0; }
  0000147A 6B2000000000           MOV.W       @_g_led_r_max_flg:32,R0
  00001480 4600                   BNE         L7956:8
  00001482 6B2000000000           MOV.W       @_g_led_r_min_flg:32,R0
  00001488 4700                   BEQ         L7957:8
  0000148A                    L7956:                                
  0000148A 7F5A7030               BSET.B      #3,@H'00FFFF5A:8
  0000148E 4000                   BRA         L7958:8
  00001490                    L7950:                                
      1394:        }
      1395:        // --------------------------------------------------------------------
      1396:        // LED減光処理
      1397:        // --------------------------------------------------------------------
      1398:        else if((LEDonoff_cnt >= 1) && (LEDonoff_cnt <= 19))
  00001490 0D00                   MOV.W       R0,R0
  00001492 4700                   BEQ         L7958:8
  00001494 79200013               CMP.W       #H'0013:16,R0
  00001498 4200                   BHI         L7958:8
      1399:        {
      1400:            if((backlight_dimmer_flg == 1) && ((g_led_o_max_flg) || (g_led_o_min_flg))) PM.DR.BIT.B0 = 0;
  0000149A 6B38000000001F10       CMP.W       #1:3,@_backlight_dimmer_flg:32
  000014A2 4600                   BNE         L7962:8
  000014A4 6B2000000000           MOV.W       @_g_led_o_max_flg:32,R0
  000014AA 4600                   BNE         L7964:8
  000014AC 6B2000000000           MOV.W       @_g_led_o_min_flg:32,R0
  000014B2 4700                   BEQ         L7962:8
  000014B4                    L7964:                                
  000014B4 6A18EE517200           BCLR.B      #0,@H'00FFEE51:16
  000014BA                    L7962:                                
      1401:            if((backlight_dimmer_flg == 1) && ((g_led_r_max_flg) || (g_led_r_min_flg))) PB.DR.BIT.B3 = 0;
  000014BA 6B38000000001F10       CMP.W       #1:3,@_backlight_dimmer_flg:32
  000014C2 4600                   BNE         L7958:8
  000014C4 6B2000000000           MOV.W       @_g_led_r_max_flg:32,R0
  000014CA 4600                   BNE         L7957:8
  000014CC 6B2000000000           MOV.W       @_g_led_r_min_flg:32,R0
  000014D2 4700                   BEQ         L7958:8
  000014D4                    L7957:                                
  000014D4 7F5A7230               BCLR.B      #3,@H'00FFFF5A:8
  000014D8                    L7958:                                
      1402:        }
      1403:        
      1404:        LEDonoff_cnt ++;
  000014D8 6910                   MOV.W       @ER1,R0
  000014DA 0B50                   INC.W       #1,R0
      1405:        if(LEDonoff_cnt > 19) LEDonoff_cnt = 0;
  000014DC 79200013               CMP.W       #H'0013:16,R0
  000014E0 4300                   BLS         L7994:8
  000014E2 1900                   SUB.W       R0,R0
  000014E4                    L7994:                                
  000014E4 6990                   MOV.W       R0,@ER1
      1406:        
      1407:        // --------------------------------------------------------------------
      1408:        // SCI5 コマンド処理
      1409:        // --------------------------------------------------------------------
      1410:        if      (g_e2p_data.E2P_1.model == Freedom2)
  000014E6 6A3800000000A005       CMP.B       #5:8,@(_g_e2p_data+2):32
  000014EE 58600000               BNE         L7970:16
      1411:        {
      1412:            if(g_e2p_data.E2P_1.control.BIT.FC_mode == 0)   // FC_mode FAST
  000014F2 7A0100000000           MOV.L       #__$sci_rcv_cnt$22,ER1
  000014F8 01006910               MOV.L       @ER1,ER0
  000014FC 0B70                   INC.L       #1,ER0
  000014FE 01006990               MOV.L       ER0,@ER1
  00001502 6A30000000007750       BLD.B       #5,@(_g_e2p_data+3):32
  0000150A 4500                   BCS         L7972:8
      1413:            {
      1414:                sci_rcv_cnt ++;
      1415:                if      (sci_rcv_cnt ==   1)
  0000150C 1F98                   CMP.L       #1:3,ER0
  0000150E 4700                   BEQ         L7974:8
      1416:                {
      1417:                    UART_Tx_Char(0x3F);     // ?
      1418:                    UART_Tx_Char(0x44);     // D
      1419:                    UART_Tx_Char(0x41);     // A
      1420:                    UART_Tx_Char(0x54);     // T
      1421:                    UART_Tx_Char(0x0D);     // [CR]
      1422:                    sci_rcv_command = 0;
      1423:                    sci_rcv_pointer = 0;
      1424:                }
      1425:                else if (sci_rcv_cnt >=  70) //  単一コードで高速化
  00001510 7A280046               CMP.L       #H'0046:16,ER0
  00001514 58500000               BLO         L7975:16
  00001518 4000                   BRA         L7976:8
  0000151A                    L7972:                                
      1426:                {
      1427:                    sci_rcv_cnt = 0;
      1428:                }
      1429:                else
      1430:                {
      1431:                    //
      1432:                }
      1433:            }
      1434:            else                                            // FC_mode ALL
      1435:            {
      1436:                sci_rcv_cnt ++;
      1437:                if      (sci_rcv_cnt ==   1)
  0000151A 1F98                   CMP.L       #1:3,ER0
  0000151C 4700                   BEQ         L7974:8
      1438:                {
      1439:                    UART_Tx_Char(0x3F);     // ?
      1440:                    UART_Tx_Char(0x44);     // D
      1441:                    UART_Tx_Char(0x41);     // A
      1442:                    UART_Tx_Char(0x54);     // T
      1443:                    UART_Tx_Char(0x0D);     // [CR]
      1444:                    sci_rcv_command = 0;
      1445:                    sci_rcv_pointer = 0;
      1446:                }
      1447:                else if (sci_rcv_cnt ==  70)
  0000151E 7A280046               CMP.L       #H'0046:16,ER0
  00001522 4600                   BNE         L7979:8
      1448:                {
      1449:                    UART_Tx_Char(0x3F);     // ?
  00001524 F83F                   MOV.B       #H'3F:8,R0L
  00001526 7A0200000000           MOV.L       #_UART_Tx_Char,ER2
  0000152C 5D20                   JSR         @ER2
      1450:                    UART_Tx_Char(0x48);     // H
  0000152E F848                   MOV.B       #H'48:8,R0L
  00001530 5D20                   JSR         @ER2
      1451:                    UART_Tx_Char(0x4F);     // O
  00001532 F84F                   MOV.B       #H'4F:8,R0L
  00001534 5D20                   JSR         @ER2
      1452:                    UART_Tx_Char(0x53);     // S
  00001536 F853                   MOV.B       #H'53:8,R0L
  00001538 5D20                   JSR         @ER2
      1453:                    UART_Tx_Char(0x0D);     // [CR]
  0000153A F80D                   MOV.B       #H'0D:8,R0L
  0000153C 5D20                   JSR         @ER2
      1454:                    sci_rcv_command = 1;
  0000153E 6BF100000000           MOV.W       #1:4,@_sci_rcv_command:32
  00001544 4000                   BRA         L7980:8
  00001546                    L7979:                                
      1455:                    sci_rcv_pointer = 0;
      1456:                }
      1457:                else if (sci_rcv_cnt >= 140)
  00001546 7A28008C               CMP.L       #H'008C:16,ER0
  0000154A 4500                   BLO         L7975:8
  0000154C                    L7976:                                
  0000154C 1A80                   SUB.L       ER0,ER0
  0000154E 01006990               MOV.L       ER0,@ER1
  00001552 4000                   BRA         L7975:8
  00001554                    L7974:                                
  00001554 F83F                   MOV.B       #H'3F:8,R0L
  00001556 7A0200000000           MOV.L       #_UART_Tx_Char,ER2
  0000155C 5D20                   JSR         @ER2
  0000155E F844                   MOV.B       #H'44:8,R0L
  00001560 5D20                   JSR         @ER2
  00001562 F841                   MOV.B       #H'41:8,R0L
  00001564 5D20                   JSR         @ER2
  00001566 F854                   MOV.B       #H'54:8,R0L
  00001568 5D20                   JSR         @ER2
  0000156A F80D                   MOV.B       #H'0D:8,R0L
  0000156C 5D20                   JSR         @ER2
  0000156E 6BF000000000           MOV.W       #0:4,@_sci_rcv_command:32
  00001574                    L7980:                                
  00001574 6BF000000000           MOV.W       #0:4,@_sci_rcv_pointer:32
  0000157A 4000                   BRA         L7975:8
  0000157C                    L7970:                                
      1458:                {
      1459:                    sci_rcv_cnt = 0;
      1460:                }
      1461:                else
      1462:                {
      1463:                    //
      1464:                }
      1465:            }
      1466:        }
      1467:        else if (g_e2p_data.E2P_1.model == MSquirt1)
  0000157C 6A3800000000A006       CMP.B       #6:8,@(_g_e2p_data+2):32
  00001584 4600                   BNE         L7975:8
      1468:        {
      1469:            sci_rcv_cnt ++;
  00001586 010E481000000000       ADD.L       #1:16,@__$sci_rcv_cnt$22:32
           0001               
  00001590                    L7975:                                
      1470:    //      if      (sci_rcv_cnt ==   1)
      1471:    //      {
      1472:    //          UART_Tx_Char(0x41);     // A
      1473:    //          sci_rcv_pointer = 0;
      1474:    //      }
      1475:    //      else if (sci_rcv_cnt >=  50) //  50mSec周期 20Hz
      1476:    //      {
      1477:    //          sci_rcv_cnt = 0;
      1478:    //      }
      1479:    //      else
      1480:    //      {
      1481:    //          //
      1482:    //      }
      1483:        }
      1484:        else
      1485:        {
      1486:            //
      1487:        }
      1488:        
      1489:        // --------------------------------------------------------------------
      1490:        // CAN 時分割処理用タイマー
      1491:        // --------------------------------------------------------------------
      1492:        g_can_rcv_timer ++;
  00001590 6B38000000000A10       ADD.W       #1:3,@_g_can_rcv_timer:32
      1493:        if(g_can_rcv_timer > 10) g_can_rcv_timer = 10;
  00001598 015E482000000000       CMP.W       #H'000A:16,@_g_can_rcv_timer:32
           000A               
  000015A2 4300                   BLS         L7983:8
  000015A4 6BFA00000000           MOV.W       #H'A:4,@_g_can_rcv_timer:32
  000015AA                    L7983:                                
  000015AA 5402                   RTS/L       ER2
      1494:    }
      1495:    
      1496:    #ifdef __cplusplus
      1497:    void abort(void)
      1498:    {
      1499:    
      1500:    }
      1501:    #endif
      1502:    
D                                                                  ; section
  00000000                    _version:                            ; static: version
  00000000 76312E3034             .SDATA      "v1.04"
B                                                                  ; section
  00000000                    __$can_rcv_cnt$8:                    ; static: can_rcv_cnt
  00000000 00000002               .RES.W      1
  00000002                    __$sci_rcv_cnt$22:                   ; static: sci_rcv_cnt
  00000002 00000004               .RES.L      1
  00000006                    _g_e2p_data:                         ; static: g_e2p_data
  00000006 00000092               .RES.B      146
  00000098                    _g_MoTeC1_data:                      ; static: g_MoTeC1_data
  00000098 0000002E               .RES.W      23
  000000C6                    _g_Haltech1_data:                    ; static: g_Haltech1_data
  000000C6 0000001A               .RES.W      13
  000000E0                    _g_Haltech2_data:                    ; static: g_Haltech2_data
  000000E0 00000026               .RES.W      19
  00000106                    _g_Freedom2_data:                    ; static: g_Freedom2_data
  00000106 00000032               .RES.W      25
  00000138                    _g_Megasquirt1_data:                 ; static: g_Megasquirt1_data
  00000138 00000018               .RES.W      12
  00000150                    _g_refresh_done:                     ; static: g_refresh_done
  00000150 00000002               .RES.W      1
  00000152                    _g_led_o_max_flg:                    ; static: g_led_o_max_flg
  00000152 00000002               .RES.W      1
  00000154                    _g_led_o_min_flg:                    ; static: g_led_o_min_flg
  00000154 00000002               .RES.W      1
  00000156                    _g_led_r_max_flg:                    ; static: g_led_r_max_flg
  00000156 00000002               .RES.W      1
  00000158                    _g_led_r_min_flg:                    ; static: g_led_r_min_flg
  00000158 00000002               .RES.W      1
  0000015A                    _g_can_rcv_timer:                    ; static: g_can_rcv_timer
  0000015A 00000002               .RES.W      1
  0000015C                    _g_int50mscnt:                       ; static: g_int50mscnt
  0000015C 00000004               .RES.L      1
  00000160                    _touch_done_flg:                     ; static: touch_done_flg
  00000160 00000002               .RES.W      1
  00000162                    _touch_drag_flg:                     ; static: touch_drag_flg
  00000162 00000002               .RES.W      1
  00000164                    _g_PressX:                           ; static: g_PressX
  00000164 00000002               .RES.W      1
  00000166                    _g_PressY:                           ; static: g_PressY
  00000166 00000002               .RES.W      1
  00000168                    _g_DragX:                            ; static: g_DragX
  00000168 00000002               .RES.W      1
  0000016A                    _g_DragY:                            ; static: g_DragY
  0000016A 00000002               .RES.W      1
  0000016C                    __$g_state:                          ; static: g_state
  0000016C 00000002               .RES.W      1
  0000016E                    __$g_model:                          ; static: g_model
  0000016E 00000002               .RES.W      1
  00000170                    __$touch_cnt:                        ; static: touch_cnt
  00000170 00000002               .RES.W      1
  00000172                    __$Beep_OneShotMin_cnt:              ; static: Beep_OneShotMin_cnt
  00000172 00000002               .RES.W      1
  00000174                    __$Beep_OneShotMax_cnt:              ; static: Beep_OneShotMax_cnt
  00000174 00000002               .RES.W      1
  00000176                    __$Beep_TwoShotMin_cnt:              ; static: Beep_TwoShotMin_cnt
  00000176 00000002               .RES.W      1
  00000178                    __$master_warning_cnt:               ; static: master_warning_cnt
  00000178 00000002               .RES.W      1
  0000017A                    __$g_shift_timing_cnt:               ; static: g_shift_timing_cnt
  0000017A 00000002               .RES.W      1
  0000017C                    __$LEDonoff_cnt:                     ; static: LEDonoff_cnt
  0000017C 00000002               .RES.W      1
  0000017E                    _dmy:                                ; static: dmy
  0000017E 00000004               .RES.L      1


