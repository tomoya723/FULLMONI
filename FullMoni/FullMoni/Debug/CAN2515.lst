H8S,H8/300 SERIES C/C++ COMPILER (V.7.00.00.000)   16-Jun-2013 20:55:28 PAGE   1

******* STACK FRAME INFORMATION ********

FILE NAME: C:\WorkSpace\FullMoni\FullMoni\CAN2515.c

Function (File C:\WorkSpa, Line    36): CANInit

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x00000002 Byte(s)
Total Frame Size        : 0x00000006 Byte(s)

Used Runtime Library Name


Function (File C:\WorkSpa, Line    63): CANRxCheck

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x00000002 Byte(s)
Total Frame Size        : 0x00000006 Byte(s)

Used Runtime Library Name


Function (File C:\WorkSpa, Line    85): CANReset

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x00000000 Byte(s)
Total Frame Size        : 0x00000004 Byte(s)

Used Runtime Library Name


Function (File C:\WorkSpa, Line    98): CANWriteReg

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x00000008 Byte(s)
Total Frame Size        : 0x0000000c Byte(s)

Used Runtime Library Name


Function (File C:\WorkSpa, Line   114): CANRegRead2B

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x00000008 Byte(s)
Total Frame Size        : 0x0000000c Byte(s)

Used Runtime Library Name


Function (File C:\WorkSpa, Line   137): CANSetSidFilteMask

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x00000008 Byte(s)
Total Frame Size        : 0x0000000c Byte(s)

Used Runtime Library Name


Function (File C:\WorkSpa, Line   148): CANBitModCmd

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x0000000c Byte(s)
Total Frame Size        : 0x00000010 Byte(s)

Used Runtime Library Name


Function (File C:\WorkSpa, Line   164): CANTxRxBufRW

  Optimize Option Specified : No Allocation Information Available

Parameter Area Size     : 0x00000000 Byte(s)
Linkage Area Size       : 0x00000004 Byte(s)
Local Variable Size     : 0x00000000 Byte(s)
Temporary Size          : 0x00000000 Byte(s)
Register Save Area Size : 0x0000000c Byte(s)
Total Frame Size        : 0x00000010 Byte(s)

Used Runtime Library Name


H8S,H8/300 SERIES C/C++ COMPILER (V.7.00.00.000)   16-Jun-2013 20:55:28 PAGE   1

************ OBJECT LISTING ************

FILE NAME: C:\WorkSpace\FullMoni\FullMoni\CAN2515.c

SCT OFFSET CODE               LABEL     INSTRUCTION OPERAND    COMMENT

P                                                                  ; section
         1:    // --------------------------------------------------------------------
         2:    // Copylight (C) 2013, Tomoya Sato( http://pub.ne.jp/nacci_tomoya )
         3:    //
         4:    // This file is part of FullMoni firmwere.
         5:    //
         6:    // FullMoni is free software: you can redistribute it and/or modify
         7:    // it under the terms of the GNU General Public License as published by
         8:    // the Free Software Foundation, either version 3 of the License, or
         9:    // (at your option ) any later version.
        10:    //
        11:    // FullMoni is distributed in the hope that it will be useful,
        12:    // but WITHIOUT ANY WARRANTY; without even the implied warranty of
        13:    // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
        14:    // GNU General Public License for more details.
        15:    //
        16:    // You should have received a copy of the GNU General Public License
        17:    // along with FullMoni. if not, see <http:/www.gnu.org/licenses/>.
        18:    //
        19:    // filename     :   CAN2515.c
        20:    // brief        :   FullMoni rev.B CAN管理
        21:    // author       :   Tomoya Sato
        22:    // update       :   2013/06/16
        23:    // version      :   1.03
        24:    // --------------------------------------------------------------------
        25:    
        26:    // --------------------------------------------------------------------
        27:    // ユーザーヘッダファイル
        28:    // --------------------------------------------------------------------
        29:    #include "iodefine.h"
        30:    #include "CAN2515.h"
        31:    #include "spi.h"
        32:    
        33:    // --------------------------------------------------------------------
        34:    // MPC2515初期化
        35:    // --------------------------------------------------------------------
        36:    void CANInit(unsigned char brp)
  00000000                    _CANInit:                            ; function: CANInit
  00000000 6DF2                   PUSH.W      R2
        37:    {
        38:        unsigned char reg;
        39:        
        40:        CAN_SPI_CS_H;
  00000002 0C8A                   MOV.B       R0L,R2L
  00000004 7F507020               BSET.B      #2,@H'00FFFF50:8
  00000008 5500                   BSR         _CANReset:8
        41:        
        42:        CANReset();
        43:        
        44:        CANSetOpMode(CAM_MODE_CONFIG);
  0000000A 7900E00F               MOV.W       #H'E00F:16,R0
  0000000E F980                   MOV.B       #H'80:8,R1L
  00000010 5E000000               JSR         @_CANBitModCmd:24
        45:        
        46:        reg = 64 + brp;
        47:        CANWriteReg(CAN_CNF1, reg);
  00000014 8A40                   ADD.B       #H'40:8,R2L
  00000016 0CA0                   MOV.B       R2L,R0H
  00000018 F82A                   MOV.B       #H'2A:8,R0L
  0000001A 5500                   BSR         _CANWriteReg:8
        48:        
        49:        reg = 0x92;
        50:        CANWriteReg(CAN_CNF2, reg);
  0000001C 79009229               MOV.W       #H'9229:16,R0
  00000020 5500                   BSR         _CANWriteReg:8
        51:        
        52:        reg = 0x02;
        53:        CANWriteReg(CAN_CNF3, reg);
  00000022 79000228               MOV.W       #H'0228:16,R0
  00000026 5500                   BSR         _CANWriteReg:8
  00000028 6D72                   POP.W       R2
  0000002A 5470                   RTS
        54:        
        55:    //  CANSetOpMode(CAM_MODE_NORMAL);
        56:    //  CANSetOpMode(CAM_MODE_LISTEN);
        57:    }
        58:    
        59:    
        60:    // --------------------------------------------------------------------
        61:    // CAN受信チェック
        62:    // --------------------------------------------------------------------
        63:    unsigned char CANRxCheck(unsigned char rxbnum)
  0000002C                    _CANRxCheck:                         ; function: CANRxCheck
  0000002C 6DF2                   PUSH.W      R2
        64:    {
        65:        unsigned char rxstat;
        66:        
        67:        rxstat = CANReadRXStat();           // 受信ステータス取得
  0000002E 0C8A                   MOV.B       R0L,R2L
  00000030 790000B0               MOV.W       #H'00B0:16,R0
  00000034 5500                   BSR         _CANRegRead2B:8
        68:        
        69:        if(rxbnum == 0)
  00000036 0CAA                   MOV.B       R2L,R2L
  00000038 4600                   BNE         L6915:8
        70:        {
        71:            return rxstat & 1<<MsgInRXB0;
  0000003A E840                   AND.B       #H'40:8,R0L
  0000003C 6D72                   POP.W       R2
  0000003E 5470                   RTS
  00000040                    L6915:                                
        72:        }
        73:        else if(rxbnum == 1)
  00000040 AA01                   CMP.B       #1:8,R2L
  00000042 4600                   BNE         L6918:8
        74:        {
        75:            return rxstat & 1<<MsgInRXB1;
  00000044 E880                   AND.B       #H'80:8,R0L
  00000046 6D72                   POP.W       R2
  00000048 5470                   RTS
  0000004A                    L6918:                                
        76:        }
        77:        
        78:        return rxstat & ( (1<<MsgInRXB0) | (1<<MsgInRXB1) );
  0000004A E8C0                   AND.B       #H'C0:8,R0L
  0000004C 6D72                   POP.W       R2
  0000004E 5470                   RTS
        79:    }
        80:    
        81:    
        82:    // --------------------------------------------------------------------
        83:    // CANリセット
        84:    // --------------------------------------------------------------------
        85:    void CANReset(void)
  00000050                    _CANReset:                           ; function: CANReset
        86:    {
        87:        CAN_SPI_CS_L;
  00000050 7F507220               BCLR.B      #2,@H'00FFFF50:8
        88:        
        89:        SPI_TxRx(SPI_INST_RESET);       // リセット
  00000054 790000C0               MOV.W       #H'00C0:16,R0
  00000058 5E000000               JSR         @_SPI_TxRx:24
        90:        
        91:        CAN_SPI_CS_H;
  0000005C 7F507020               BSET.B      #2,@H'00FFFF50:8
  00000060 5470                   RTS
        92:    }
        93:    
        94:    
        95:    // --------------------------------------------------------------------
        96:    // CANレジスタ バイト・ライト
        97:    // --------------------------------------------------------------------
        98:    void CANWriteReg(unsigned char adrs, unsigned char data)
  00000062                    _CANWriteReg:                        ; function: CANWriteReg
  00000062 01106DF2               STM.L       (ER2-ER3),@-SP
        99:    {
       100:        CAN_SPI_CS_L;
  00000066 0D02                   MOV.W       R0,R2
  00000068 7F507220               BCLR.B      #2,@H'00FFFF50:8
       101:        
       102:        SPI_TxRx(SPI_INST_WRITE);       // バイト・ライト
  0000006C 0F20                   MOV.W       #2:3,R0
  0000006E 7A0300000000           MOV.L       #_SPI_TxRx,ER3
  00000074 5D30                   JSR         @ER3
       103:        SPI_TxRx(adrs);
  00000076 0CA8                   MOV.B       R2L,R0L
  00000078 1750                   EXTU.W      R0
  0000007A 5D30                   JSR         @ER3
       104:        SPI_TxRx(data);
  0000007C 0C28                   MOV.B       R2H,R0L
  0000007E 1750                   EXTU.W      R0
  00000080 5D30                   JSR         @ER3
       105:        
       106:        CAN_SPI_CS_H;
  00000082 7F507020               BSET.B      #2,@H'00FFFF50:8
  00000086 5413                   RTS/L       (ER2-ER3)
       107:    }
       108:    
       109:    // --------------------------------------------------------------------
       110:    // CANレジスタ・リード
       111:    // ステータス・リード
       112:    // 受信ステータス・リード  (3機能兼用ルーチン)
       113:    // --------------------------------------------------------------------
       114:    unsigned char CANRegRead2B(unsigned char inst, unsigned char adrs)
  00000088                    _CANRegRead2B:                       ; function: CANRegRead2B
  00000088 01106DF2               STM.L       (ER2-ER3),@-SP
       115:    {
       116:        unsigned char dat;
       117:        
       118:        CAN_SPI_CS_L;
  0000008C 0C0A                   MOV.B       R0H,R2L
  0000008E 7F507220               BCLR.B      #2,@H'00FFFF50:8
       119:        
       120:        // 2バイト出力(データ入力は無視)
       121:        SPI_TxRx(inst);         // インストラクション
  00000092 1750                   EXTU.W      R0
  00000094 7A0300000000           MOV.L       #_SPI_TxRx,ER3
  0000009A 5D30                   JSR         @ER3
       122:        SPI_TxRx(adrs);
  0000009C 0CA8                   MOV.B       R2L,R0L
  0000009E 1750                   EXTU.W      R0
  000000A0 5D30                   JSR         @ER3
       123:        
       124:        // データ入力(ステータスの場合は、2回目のリピートデータ)
       125:        dat = 0;
       126:        dat = SPI_TxRx(0xFF);
  000000A2 790000FF               MOV.W       #H'00FF:16,R0
  000000A6 5D30                   JSR         @ER3
       127:        
       128:        CAN_SPI_CS_H;
  000000A8 7F507020               BSET.B      #2,@H'00FFFF50:8
  000000AC 5413                   RTS/L       (ER2-ER3)
       129:        
       130:        return dat;
       131:    }
       132:    
       133:    #ifndef CANSetSidFilteMask
       134:    // --------------------------------------------------------------------
       135:    // CAN SID フィルタ、マスク設定 (兼用ルーチン)
       136:    // --------------------------------------------------------------------
       137:    void CANSetSidFilteMask(unsigned char adrs, unsigned int sid)
  000000AE                    _CANSetSidFilteMask:                 ; function: CANSetSidFilteMask
  000000AE 01106DF2               STM.L       (ER2-ER3),@-SP
       138:    {
       139:        CANWriteReg(adrs, (unsigned char)(sid>>3));         // HIGH
  000000B2 0D82                   MOV.W       E0,R2
  000000B4 0C8B                   MOV.B       R0L,R3L
  000000B6 0D80                   MOV.W       E0,R0
  000000B8 03831110               SHLR.W      #3:5,R0
  000000BC 0C80                   MOV.B       R0L,R0H
  000000BE 0CB8                   MOV.B       R3L,R0L
  000000C0 5500                   BSR         _CANWriteReg:8
       140:        CANWriteReg(adrs + 1, (unsigned char)(sid<<5));     // LOW
  000000C2 0A0B                   INC.B       R3L
  000000C4 0CB8                   MOV.B       R3L,R0L
  000000C6 03851012               SHLL.W      #5:5,R2
  000000CA 0CA0                   MOV.B       R2L,R0H
  000000CC 5500                   BSR         _CANWriteReg:8
  000000CE 5413                   RTS/L       (ER2-ER3)
       141:    }
       142:    #endif
       143:    
       144:    
       145:    // --------------------------------------------------------------------
       146:    // CANビット・モデファイ・コマンド
       147:    // --------------------------------------------------------------------
       148:    void CANBitModCmd(unsigned char adrs, unsigned char mask, unsigned char data)
  000000D0                    _CANBitModCmd:                       ; function: CANBitModCmd
  000000D0 01206DF4               STM.L       (ER4-ER6),@-SP
       149:    {
       150:        CAN_SPI_CS_L;
  000000D4 0C9C                   MOV.B       R1L,R4L
  000000D6 0D05                   MOV.W       R0,R5
  000000D8 7F507220               BCLR.B      #2,@H'00FFFF50:8
       151:        
       152:        SPI_TxRx(SPI_INST_BIT_MOD);         // ビット・モデファイ
  000000DC 0F50                   MOV.W       #5:3,R0
  000000DE 7A0600000000           MOV.L       #_SPI_TxRx,ER6
  000000E4 5D60                   JSR         @ER6
       153:        SPI_TxRx(adrs);
  000000E6 0CD8                   MOV.B       R5L,R0L
  000000E8 1750                   EXTU.W      R0
  000000EA 5D60                   JSR         @ER6
       154:        SPI_TxRx(mask);
  000000EC 0C58                   MOV.B       R5H,R0L
  000000EE 1750                   EXTU.W      R0
  000000F0 5D60                   JSR         @ER6
       155:        SPI_TxRx(data);
  000000F2 0CC8                   MOV.B       R4L,R0L
  000000F4 1750                   EXTU.W      R0
  000000F6 5D60                   JSR         @ER6
       156:        
       157:        CAN_SPI_CS_H;
  000000F8 7F507020               BSET.B      #2,@H'00FFFF50:8
  000000FC 5426                   RTS/L       (ER4-ER6)
       158:    }
       159:    
       160:    
       161:    // --------------------------------------------------------------------
       162:    // CAN送／受信バッファ シーケンシャル・リード／ライト (兼用ルーチン)
       163:    // --------------------------------------------------------------------
       164:    void CANTxRxBufRW(unsigned char inst, unsigned char readop, unsigned char *data, unsigned char cnt)
  000000FE                    _CANTxRxBufRW:                       ; function: CANTxRxBufRW
  000000FE 01206DF4               STM.L       (ER4-ER6),@-SP
       165:    {
       166:        unsigned char dat;
       167:        unsigned char p;
       168:        
       169:        CAN_SPI_CS_L;
  00000102 0F96                   MOV.L       ER1,ER6
  00000104 0C05                   MOV.B       R0H,R5H
  00000106 7F507220               BCLR.B      #2,@H'00FFFF50:8
       170:        
       171:        // インストラクションの送信
       172:        SPI_TxRx(inst);
  0000010A 1750                   EXTU.W      R0
  0000010C 7A0400000000           MOV.L       #_SPI_TxRx,ER4
  00000112 5D40                   JSR         @ER4
       173:        
       174:        // =============== 送信/受信バッファ内容の送受信 =================
       175:        if(readop)
  00000114 18DD                   SUB.B       R5L,R5L
  00000116 0C55                   MOV.B       R5H,R5H
  00000118 4700                   BEQ         L6932:8
  0000011A                    L6931:                                
       176:        {
       177:            // データ受信
       178:            for(p = 0; p < cnt; p++)
  0000011A 017AC72D0011           CMP.B       @(H'0011:16,SP),R5L
  00000120 4400                   BHS         L6934:8
       179:            {
       180:                dat = 0;
       181:                dat = SPI_TxRx(0xFF);
  00000122 790000FF               MOV.W       #H'00FF:16,R0
  00000126 5D40                   JSR         @ER4
  00000128 0C81                   MOV.B       R0L,R1H
       182:                data[p] = dat;
  0000012A 0CD8                   MOV.B       R5L,R0L
  0000012C 1760                   EXTU.L      #2,ER0
  0000012E 0AE0                   ADD.L       ER6,ER0
  00000130 6881                   MOV.B       R1H,@ER0
  00000132 4001                   BRA/S       L6931:8
  00000134 0A0D                   INC.B       R5L
  00000136                    L6932:                                
       183:            }
       184:        }
       185:        else
       186:        {
       187:            // データ送信
       188:            for(p = 0; p < cnt; p++)
  00000136 017AC72D0011           CMP.B       @(H'0011:16,SP),R5L
  0000013C 4400                   BHS         L6934:8
       189:            {
       190:                dat = data[p];
       191:                SPI_TxRx(dat);
  0000013E 0CD8                   MOV.B       R5L,R0L
  00000140 1760                   EXTU.L      #2,ER0
  00000142 0AE0                   ADD.L       ER6,ER0
  00000144 6808                   MOV.B       @ER0,R0L
  00000146 1750                   EXTU.W      R0
  00000148 5D40                   JSR         @ER4
  0000014A 4001                   BRA/S       L6932:8
  0000014C 0A0D                   INC.B       R5L
  0000014E                    L6934:                                
       192:            }
       193:        }
       194:        
       195:        CAN_SPI_CS_H;
  0000014E 7F507020               BSET.B      #2,@H'00FFFF50:8
  00000152 5426                   RTS/L       (ER4-ER6)
       196:    }


